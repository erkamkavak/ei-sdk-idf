/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 03.06.2025 08:08:12

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 7024;
#else
constexpr int kTensorArenaSize = 6000;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.055160831660032272, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 13, 64, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 13, 1, 64, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data7[2] = { -1, 448, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data8[2] = { 2075, -2075, };
const TfArray<1, int> tensor_dimension8 = { 1, { 2 } };
const TfArray<1, float> quant8_scale = { 1, { 0.00012672260345425457, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[2*448] = { 
  -14, -11, -6, 0, -30, 21, 47, -15, 68, 0, 38, 33, 52, 26, 16, 27, -18, 10, 49, -11, 55, 32, 19, 11, -13, 10, -14, -23, -26, -21, -15, 18, -9, 23, 12, -1, -16, 46, -34, -3, -11, -2, 55, 28, -17, -14, 15, -15, 28, 32, 64, 19, 17, 0, -4, -8, 21, 12, 10, -4, 39, 10, -23, -1, 45, -44, 16, -5, 39, 24, 37, 19, -6, -10, -26, 48, -1, -24, -34, 25, 27, 17, -21, -3, -56, 8, 38, -24, -23, -5, -25, -40, -22, 54, -12, 10, 58, -22, 31, -9, -12, 22, -58, 47, 54, -7, 36, -3, -17, 16, 26, -39, -10, -14, 60, -24, -16, -19, -47, 5, -12, 16, 43, 13, 28, -20, 9, 45, 25, -28, -17, -4, 4, 57, 31, 20, 2, -25, -21, 14, -7, 43, -13, 60, 0, -10, -34, -65, -23, -39, 51, -15, -26, 61, -1, -9, -33, 8, -30, 43, 18, -3, -3, 48, -8, 30, -4, 7, -53, -3, 28, -19, -6, -13, 21, 27, -34, -26, 11, -24, -21, 53, -5, 48, 8, 16, 9, -27, 18, 70, 19, 10, 16, -9, -38, 9, -25, 21, 29, -19, -17, -5, -27, -21, -2, -9, -13, -47, -14, -28, 12, 50, 14, -2, 9, 46, -31, 0, -31, -5, 19, 27, 18, 25, -8, 48, 39, 52, 20, -17, -18, 8, 9, 14, -38, 3, -47, -31, 23, -23, 38, -6, 10, -6, -12, 61, -2, 27, 13, 38, 34, -31, 53, 39, 49, -13, 1, -56, -2, -3, -13, 21, 3, 23, 16, -42, 3, 9, 19, -44, -1, 34, -20, -25, 25, 33, 3, -27, 0, 38, -3, 32, -4, 40, 22, -9, 48, 26, 12, 30, 9, -7, 5, -3, -6, 39, 4, -21, -7, 24, 7, -45, -11, -26, 17, -20, -5, -14, 11, 47, -7, 51, 9, 13, -7, -16, 10, 22, 9, 2, 10, -55, 1, -27, -21, -20, 26, -5, 12, 31, -27, -13, 46, 40, -15, 52, 8, -15, 4, 9, -38, 4, -16, -23, 42, 20, 26, -9, 10, -19, 35, 0, 14, 26, 13, 15, -66, -5, -25, 12, 0, 27, -18, -24, 26, -18, 7, 12, 13, 27, 6, -88, 51, 30, -24, 45, 22, 15, 15, -3, 44, 1, 10, -12, 5, 85, -3, 6, 21, -5, -36, 4, 21, -21, 39, 15, 25, 28, -1, 9, 23, 0, 66, -1, 34, -12, 5, -5, 5, 1, -14, -6, 6, 37, 22, 5, 2, 38, 31, -32, -11, 28, 55, -11, -3, 14, 18, -4, -6, 30, 1, -6, -11, 80, 14, 72, 40, 29, -63, 42, -2, -14, 29, 18, 81, -6, 2, 11, 
  -14, -29, -38, -34, -11, 19, -36, -17, -55, -41, -23, -25, -54, -8, -16, -42, 10, -6, -30, 18, -23, -32, 10, 10, 15, 14, 18, 35, -7, -8, -15, 16, -34, 2, 1, 2, 12, -72, 35, 8, -11, 11, -44, -32, 10, -20, 13, 15, -44, -33, -15, -26, 18, -1, 2, -31, 31, -48, -30, -2, -52, 3, -7, -7, -23, 55, -2, 19, -21, -59, -10, -44, 1, 54, 5, -49, 19, 4, 14, -18, -65, 2, -12, 23, 32, 31, -32, 27, 17, 15, 20, 10, 24, -25, 13, -50, -30, -21, -47, 7, 55, -8, 21, -48, -24, 24, -4, 4, -19, 11, -67, 12, 15, 21, -57, 53, 3, 1, 10, -25, -8, 6, -47, -17, -13, -17, 6, -62, 9, 13, -11, 36, 23, -18, -31, -66, 8, 12, 11, 6, 6, -4, 46, -23, 50, 51, -16, 40, 30, 9, -80, -12, 24, -47, -49, 9, 11, 35, 28, -14, -20, -35, -37, -88, 41, 10, 6, -48, 24, 50, -14, 21, 12, 23, -46, 3, -11, 11, 40, -1, 7, -94, 23, -41, -21, -31, -33, 17, -48, -39, -7, 0, -28, 3, 22, 33, 33, -8, -27, -17, -2, 29, 13, -2, -4, -16, -9, 1, 16, 31, -26, -27, 26, 23, 7, -11, -3, -29, 31, 33, 11, -33, 23, -19, -18, -32, 2, -51, -35, -2, 17, -42, -35, 16, 26, -42, 21, 6, -33, -14, -16, 37, 20, 21, 3, -25, 32, -63, -43, -14, -23, 30, -28, -15, -54, 12, -45, 9, 35, 37, 8, -2, -28, 5, 15, 11, 20, 24, -26, 14, -18, -35, 11, 36, 12, -32, 43, 17, 6, -14, 10, -1, 29, 0, -27, 23, -34, -21, -33, 1, -46, 15, -48, -1, 18, 7, -20, 24, 25, -22, 24, 21, 6, 9, -45, 3, 14, 47, -26, -23, 17, -59, -51, -32, -30, -4, -27, -38, -22, -4, 8, 20, 0, 8, 15, -26, -34, 1, 12, -30, 39, -1, -9, -16, 20, -19, -8, 17, 12, -34, 20, -24, -31, 12, -16, 9, -1, -8, 15, 11, -37, -23, -9, -21, -21, -19, 39, 2, 70, 11, -5, -20, 1, -17, -1, 34, -15, 1, -24, -16, -12, 90, -34, -2, -15, -32, -8, -36, 2, -10, -28, 1, -1, -11, 11, -84, 2, -2, 8, -10, -15, -1, -27, 5, -14, -8, 1, -56, -29, -45, -24, -12, -47, 21, -30, 8, -15, 6, 9, -11, -23, -6, -2, -16, -14, -2, -9, -46, -33, -7, 28, 5, -51, 2, 3, 11, -50, 20, -27, -61, 25, -13, -39, -72, 9, -65, -32, 14, 30, -49, -13, -41, -15, 19, -127, -9, 12, 29, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 2,448 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0040349755436182022, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[64] = { 2314, -609, 1538, 1080, 726, 5117, -1728, 3115, 1180, -659, 677, 2860, 35, 2039, 1081, -654, -710, 1659, 2130, -198, -365, 1239, -1014, 461, -525, 4168, 899, 1068, -648, 1777, -781, 1420, 4857, -274, 130, 3042, -134, 1917, -175, 2856, 3001, 666, 2014, 3056, 1547, -304, 5496, 522, 3647, 1402, 2539, -630, -1024, -1063, -188, -690, -1480, 2290, 997, 1496, -4358, -1301, 2300, 3040, };
const TfArray<1, int> tensor_dimension10 = { 1, { 64 } };
const TfArray<64, float> quant10_scale = { 64, { 0.00017035352357197553, 0.00027216039597988129, 0.00020252571266610175, 0.00016868245438672602, 0.00016870659601408988, 0.00011202797759324312, 0.00013636874791700393, 0.00014193146489560604, 8.8841865363065153e-05, 0.00020597525872290134, 0.00020406981639098376, 0.00013896568270865828, 0.00012839991541113704, 0.0001341168099315837, 0.00020427905838005245, 0.00014639832079410553, 0.00014484097482636571, 0.00015220434579532593, 0.00016276216774713248, 0.00025452455156482756, 0.00028552196454256773, 0.00016414772835560143, 0.00012483594764489681, 0.00029589561745524406, 0.00020837652846239507, 0.00010325144103262573, 0.00014490514877252281, 0.00016826488717924803, 0.00010873281280510128, 0.00015785107098054141, 0.00017080918769352138, 0.00014176977856550366, 0.00011071148765040562, 0.00013630205648951232, 0.00015103934856597334, 0.00011752844147849828, 0.00017995141388382763, 9.7076503152493387e-05, 0.0002328147238586098, 0.00016590615268796682, 0.00013771544035989791, 0.00013588795263785869, 0.00017706926155369729, 0.00015872799849603325, 0.00020665251940954477, 0.00021475124231074005, 0.00012075451377313584, 0.0001684256421867758, 0.00012914443504996598, 0.00013020673941355199, 0.00013124597899150103, 0.00024788163136690855, 0.0002175748668378219, 0.00013292553194332868, 0.00025596393970772624, 0.00020641772425733507, 0.00015951784735079855, 0.00015487242490053177, 0.0001621551054995507, 0.0002115066017722711, 0.00019060485647059977, 0.00011014512710971758, 0.00013368602958507836, 0.00013464005314745009, } };
const TfArray<64, int> quant10_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[64*1*3*64] = { 
  /* [0][0][][] */ 38,-13,-33,7,-28,25,24,-2,-20,22,-49,13,-18,5,11,-12,0,-54,-74,17,-16,-22,-1,-23,-52,5,-50,-13,-48,20,25,-8,-5,-6,43,-4,-61,-29,-29,14,19,-48,-22,36,-27,22,0,0,12,-28,-62,20,-1,-24,8,-14,-8,12,8,-38,-48,3,26,-2, 15,12,7,-14,-21,-6,16,-19,-4,9,-14,17,-27,1,0,-20,-3,2,-44,-7,-14,-17,1,50,-29,-10,-4,-1,-28,-8,-25,31,-45,10,26,20,-21,-7,3,-19,22,-20,-10,-26,-19,-24,-1,8,0,-11,17,-36,-2,-26,36,29,15,7,40,-45,-3,-9,18,2, 16,-63,8,-30,-49,6,66,-16,-12,8,-10,-127,17,-38,-47,-117,18,0,-1,-4,-22,-52,9,-23,24,-9,-30,-41,2,1,-2,-14,56,-55,-71,-40,-13,-1,-78,9,31,-13,25,-23,6,-55,-19,-17,24,-4,-52,-16,-25,3,14,-15,-65,-4,-8,-83,5,17,7,-17, 
  /* [1][0][][] */ -4,3,-36,-54,-24,-30,-12,-13,-56,-21,0,27,-64,-30,5,29,-8,2,-15,-1,14,1,-40,4,21,-89,15,13,-1,-26,-64,-79,-17,-32,-15,-16,-18,0,-6,-109,-51,-46,-22,-29,3,13,-94,11,-14,15,21,-24,-1,-64,-15,-27,7,5,-12,10,7,-86,-30,-27, -16,-45,-21,-77,-41,16,-3,-52,2,-36,-21,-58,-18,-40,-40,-15,24,21,-26,16,-2,-39,1,10,-6,12,-11,-20,-1,5,-24,-24,-4,-26,-57,-45,-49,28,0,4,14,-12,-10,-38,-5,-8,-9,6,-11,-37,-33,-39,-7,-13,-23,-15,-3,-3,-27,-2,0,10,-2,18, -39,7,-25,-17,21,-6,-18,30,-49,-33,-20,-71,28,-2,-20,-127,-15,-88,12,27,-11,-76,2,-73,15,-6,-45,-41,-19,-29,-17,-25,-17,18,-76,-62,44,5,-37,11,10,11,14,-3,14,-62,-16,-54,9,-24,-46,-21,-55,-38,-18,-54,-57,-13,-30,-55,-25,-36,-41,15, 
  /* [2][0][][] */ -59,-6,-15,-25,10,5,-21,-19,-38,4,1,-36,1,6,-46,3,-17,-76,-6,-18,19,-43,5,-69,28,38,-67,-72,7,26,34,-41,-15,-4,-18,-27,-19,13,-23,26,4,8,10,-16,-46,-89,-21,13,23,5,-19,-45,-87,12,-10,20,-68,-7,-46,-70,-65,-31,2,-6, 12,20,3,-43,15,-46,-21,6,-19,-46,16,-19,-18,6,-5,-16,-98,-31,-4,-13,-38,-8,3,12,-1,-84,6,-12,-20,-27,0,-63,-1,7,-46,-60,-1,-32,0,1,-3,-24,27,-24,21,-46,25,-35,-44,-23,-52,3,-24,-8,5,-24,-57,-68,-49,13,28,-81,-28,-15, 67,17,12,-29,-38,-31,-29,-54,14,-64,5,12,-49,-48,16,-40,9,6,8,-22,-12,9,-64,6,-10,24,24,-4,-110,-2,27,24,-8,-67,3,-3,11,-47,3,18,-48,-82,-115,-4,-35,-106,9,29,-3,42,-6,-45,12,-54,7,-84,-127,-89,26,-19,11,14,17,-50, 
  /* [3][0][][] */ -22,-23,-100,30,-18,-69,-5,39,-11,10,39,-5,19,-19,-65,-18,-108,8,-27,10,1,-37,-35,23,68,31,-6,11,11,13,29,-21,-34,10,14,10,-32,-9,38,6,-52,62,35,37,-9,-14,32,-51,14,14,-20,-45,6,38,-22,29,-29,-59,-15,-29,-17,-10,-40,4, -3,-9,11,13,7,-70,-37,-59,24,-9,-15,23,-7,-77,22,40,-105,-14,-14,-42,-60,-3,-41,-12,53,26,23,-18,1,-60,-18,-13,-3,-12,-65,-59,28,-127,6,-20,-30,-14,-3,-13,-16,-6,-30,15,28,-13,-1,13,-30,12,-47,-20,4,17,6,13,-36,-15,-39,20, -31,26,5,-8,-15,-31,-42,-40,18,2,12,12,-92,-110,13,4,-46,-34,21,16,-26,32,-114,-18,-23,-26,-25,0,38,-22,-91,48,10,-5,-25,5,12,-111,4,-80,-103,-106,-97,-9,-53,-2,-46,16,-97,17,-3,16,-3,-18,-14,-70,18,39,-1,35,12,9,-56,-32, 
  /* [4][0][][] */ 14,-38,19,22,-16,-70,-55,-52,31,-59,6,33,30,8,30,0,22,-3,48,-36,-26,-34,-62,25,27,-45,-14,-19,-35,-21,10,10,-30,1,12,40,19,31,-5,19,-7,83,-66,-37,2,-30,-2,-2,-66,56,20,1,15,-6,21,-25,-42,10,-57,13,28,-43,-13,-12, 7,-17,21,-39,-127,20,-18,-58,-54,-2,-3,-61,-63,-44,-16,3,3,40,11,8,29,3,0,29,5,27,-45,-56,5,7,-31,-2,4,-62,-39,36,36,26,-50,12,-19,-67,-2,-46,14,-62,-11,-4,49,16,-14,-43,-44,-103,-38,-68,-25,-12,41,-90,-11,15,-14,-89, -8,-26,-23,-1,20,-10,8,29,-11,-10,5,-74,-39,34,-68,4,-22,20,-57,42,41,-86,28,-28,-3,26,11,-29,-8,18,-22,-1,-19,7,-35,-3,-65,4,-27,1,-30,-21,33,-3,42,-105,-40,-114,-6,8,-41,-1,-60,-27,36,-104,-82,12,-16,-59,13,7,34,-67, 
  /* [5][0][][] */ 4,-18,-29,-78,-52,10,65,19,13,-62,-39,-5,-48,8,7,-16,18,14,-68,7,-49,-39,-27,55,-22,-27,24,8,-40,-25,46,5,-36,-62,36,-31,-41,13,3,14,-77,-70,7,-62,-23,-53,15,-10,44,-31,-14,59,-29,6,-18,-30,-49,16,-95,-9,33,-7,-2,34, 7,-1,41,-22,-83,-9,-23,-9,1,-33,41,0,-38,81,3,3,-9,-23,-66,-40,-74,14,-8,7,-53,5,-65,-30,-60,12,12,-11,31,-61,-32,-11,-70,1,6,48,4,-43,27,-3,-26,-19,40,-61,44,-40,-21,-62,-61,33,12,-119,11,25,-26,-21,-37,-12,-18,-13, 34,18,-18,-52,-92,-6,-85,-85,57,-46,8,31,-76,-48,67,10,-4,-24,-127,-10,-16,11,-31,3,-73,-15,-37,-24,-35,-5,-14,46,-71,-58,-39,-4,-45,37,45,20,-27,-95,-44,18,-107,6,-19,-23,30,-46,27,-24,-73,-1,75,-19,-5,16,12,-33,-17,18,42,27, 
  /* [6][0][][] */ -41,-51,23,12,27,-27,-53,-69,-38,35,1,2,7,-54,-68,17,37,11,-20,-41,20,-53,-19,-21,-42,64,15,3,-14,3,-13,-31,-20,15,53,-5,7,-45,-72,-107,-105,-124,-42,-16,-42,54,-42,7,-23,-46,8,-20,6,25,15,43,26,-18,17,45,-15,8,78,-51, 18,-33,28,-20,19,6,28,29,-19,-22,-89,-28,-45,0,-9,-26,20,-44,1,-50,-27,3,-8,-15,15,-9,7,12,-7,-46,-53,-11,-44,30,51,-36,29,-15,-5,-19,58,-34,37,-28,33,-38,-8,3,-70,-46,-59,42,36,31,31,39,-5,9,8,36,-15,17,-2,-43, 17,-56,13,-75,23,-85,31,-37,-93,-37,-127,-37,-48,4,-12,-45,66,-26,-14,-24,-41,-22,-79,-43,-24,-62,16,-11,-30,22,-47,-61,51,-28,9,91,15,-78,0,-38,47,2,-62,-14,-13,-29,-8,68,-41,-28,-73,-11,-23,16,34,13,-12,8,37,-38,-28,-61,29,24, 
  /* [7][0][][] */ 35,-9,-11,2,-32,14,13,-1,-4,37,-103,-12,32,-10,9,-127,-6,-57,-1,3,-1,7,-13,-3,-17,-25,-53,-35,-30,10,47,-14,-31,39,-12,21,-19,-24,-1,-6,40,-32,44,-36,11,3,66,-1,4,28,-27,16,-21,5,-60,-34,-36,13,26,-88,-68,-2,-26,15, 58,-22,11,8,-22,-10,-84,-34,-5,-6,-4,-23,-31,19,-28,-12,-12,-31,-1,-31,30,-5,3,-23,-10,27,-25,-46,-64,0,20,13,28,-28,-32,9,-8,7,-38,-4,-35,-8,13,-37,33,-8,-22,-32,-36,-24,-36,-52,-78,23,2,-25,7,0,10,-41,-37,-12,58,-9, 40,14,-3,-27,19,-42,-22,34,1,-23,-23,55,14,4,26,-60,3,-94,13,26,-8,-9,-1,-41,-20,31,-35,-47,-51,5,20,17,25,-68,-46,-58,13,6,-39,17,-13,15,-17,44,19,-6,25,-98,-23,-22,-79,-19,-61,9,83,55,-62,-10,-64,-78,-15,-6,22,9, 
  /* [8][0][][] */ 74,-37,-109,-26,-31,-7,-1,8,-36,-20,105,38,2,-25,-9,50,106,10,59,-69,-82,-32,-92,77,59,-54,105,27,64,-83,40,-87,-111,37,21,-24,-25,-5,80,0,74,-66,14,87,59,22,2,70,-115,70,-68,68,37,-26,31,75,23,72,-62,79,16,-54,26,91, -13,-1,45,-100,81,-2,-41,52,-3,-60,43,27,-101,6,59,46,28,-123,-40,4,101,34,-85,16,-38,-77,-27,-18,0,-39,-18,-38,48,-1,-5,-54,0,-12,48,30,-8,58,-22,-9,-73,9,-27,-9,-12,81,-23,13,-9,25,-16,-127,31,94,-80,-1,-74,-66,37,105, 16,9,4,-110,39,17,-29,4,-114,-22,-87,48,18,-19,2,-51,-48,-78,7,41,5,-14,-7,10,-15,61,-93,-11,-101,46,11,0,37,-44,5,-79,42,-92,-28,-18,-16,-74,-46,48,38,-31,-34,-13,-96,-29,-59,12,-48,70,19,80,-7,37,-14,-24,-47,8,-65,21, 
  /* [9][0][][] */ -37,35,-67,-17,14,-78,-18,-11,-64,-86,11,-24,-26,-45,45,15,-54,34,1,-37,31,13,-90,19,27,-56,-11,2,15,16,-96,-29,-55,-8,4,34,-52,71,3,-94,-32,-107,-43,-23,22,-57,-90,-20,13,-4,-3,10,-6,-50,-3,-5,-36,-37,-44,10,-5,-58,20,14, 12,-14,-21,-30,-34,2,8,-7,-65,-6,9,-30,-56,27,-36,-3,4,-21,25,36,-25,-38,9,9,2,-20,23,-15,-12,12,28,-49,4,-4,2,-41,1,10,-1,-20,-57,-53,28,23,26,-61,-3,-7,-12,-91,56,-36,-23,-25,-7,-81,-45,-8,-36,24,-8,-40,34,18, 0,-6,16,-46,13,24,-34,15,4,-4,-44,-75,31,-25,17,-91,20,-12,12,35,15,-45,5,-44,5,11,14,-26,33,-7,-26,-16,-11,-2,5,-17,70,4,-49,10,22,43,12,-31,-4,-82,-40,9,17,-9,-53,26,-45,-15,-4,-13,-127,39,-31,-89,-7,-20,-18,1, 
  /* [10][0][][] */ -46,21,2,27,-1,-42,-9,-11,10,-22,16,18,-53,-63,19,11,-69,-20,22,-21,36,29,-37,-4,-13,-6,19,13,-40,-35,-68,3,16,0,11,41,-26,-13,-28,-79,-17,-36,-25,-37,-40,-42,-5,-28,2,64,28,-16,3,-41,-11,-6,-23,8,-11,-10,13,14,-44,2, 6,27,-52,14,-31,-52,-13,-39,-7,4,11,28,10,-26,-27,-16,15,28,-1,-12,21,-31,-20,27,75,-38,29,-6,10,3,-2,-51,-43,14,22,17,6,9,4,-83,-94,-59,11,25,14,-22,-47,16,-9,22,-3,-17,-1,4,7,-25,-30,-19,-7,2,-24,-33,-32,-10, 9,-57,19,-10,-7,-2,-1,8,-10,-36,0,-55,-26,-34,-15,11,-3,-1,22,37,43,-41,16,-55,11,30,25,-29,-3,-29,2,-22,-19,-110,-14,-15,-5,18,-45,0,23,14,4,-67,-16,-49,-71,2,29,-13,-38,18,-32,-24,-32,-127,-27,45,-53,-13,25,4,-4,23, 
  /* [11][0][][] */ 5,1,-9,-28,-17,25,7,-20,2,-9,-39,-77,-2,21,-14,-105,54,1,18,-3,-8,-28,9,-33,29,1,-36,-95,-63,-4,21,-20,10,-34,-62,0,-3,30,-53,28,4,52,43,-19,-1,-9,24,-64,16,15,-54,-18,-127,-8,45,11,-30,21,-14,-44,-7,-30,93,28, 10,-37,23,-10,-16,-24,-14,38,-11,-55,18,-46,18,-18,9,7,7,24,17,-4,2,5,-27,14,-1,29,28,-17,-5,-57,16,-29,-39,-41,-8,-5,35,5,10,20,12,12,44,-36,0,-24,11,-14,-22,28,-24,-98,1,1,1,6,-24,-4,-66,32,30,-101,-21,14, 67,3,-33,-64,-49,-6,-9,19,3,-11,-18,-12,-8,-75,-33,-30,-20,0,10,-3,24,0,25,41,-4,-10,-69,-72,17,-25,21,-21,-28,-61,-19,-26,-14,-7,-14,4,-43,94,-29,-13,9,-6,-6,-28,-42,-5,-5,-36,-35,-34,-13,-94,-29,-23,20,6,-2,-51,41,-49, 
  /* [12][0][][] */ -37,-42,5,15,-49,-3,57,42,-58,7,50,17,-56,-31,-4,6,-9,12,-28,-39,-79,16,-59,48,-17,-22,6,-8,29,-67,-38,30,-4,-18,24,17,-32,34,12,-7,35,-41,-54,-21,-46,0,-20,16,-53,49,-20,7,31,-52,-112,26,25,-22,5,2,-42,-16,-63,34, 45,-50,15,-93,-26,22,-20,12,-108,-78,28,-24,-119,-10,-47,-18,15,2,55,-18,-7,-43,-30,64,-11,14,-6,-16,-1,-56,-36,-8,-52,2,10,-43,5,7,56,-45,42,-56,-76,-80,-16,-1,-50,13,-68,20,-17,37,-5,-82,-16,23,43,-1,12,33,62,-63,38,16, -17,31,16,-86,8,33,-14,21,-66,-4,-8,-74,28,-47,-9,-38,3,-1,-37,-25,9,-22,45,-20,-23,30,8,-3,-33,30,-6,2,41,-53,-9,-53,-63,-36,-127,-34,24,-73,-17,-50,71,-113,-28,0,-66,15,-27,22,-36,45,29,20,-63,97,38,32,-14,-14,-8,-3, 
  /* [13][0][][] */ -30,13,-56,39,25,-61,-3,52,-24,9,3,-20,-52,-8,-37,20,-8,14,2,16,-27,-6,-38,-14,-49,-32,10,-33,31,-39,37,-5,-13,14,-34,-40,-79,34,-57,-19,1,6,0,46,9,7,21,-55,-52,63,7,-46,-22,-10,4,-3,-14,-49,4,-21,30,-18,17,13, 37,-2,19,8,78,-17,-49,49,-2,-45,10,-8,-16,17,10,-25,-19,5,20,-104,-18,-29,-50,20,-8,-93,-21,-80,-48,-56,-7,-68,-42,20,21,-127,-47,-50,85,13,22,-9,18,4,11,47,5,33,-58,22,-55,-22,-35,-33,-66,-30,-3,-42,-60,-1,10,-85,-73,93, 38,-12,-31,-17,-12,17,-8,-55,47,-5,10,-29,-19,-49,45,-14,-31,9,-46,-14,-10,29,-52,7,14,-50,-31,-63,-85,20,-35,-11,-31,-22,-6,25,0,-54,-12,-40,-27,-88,-62,14,-85,1,13,-45,-93,38,-57,21,-47,44,-75,-22,-36,-24,46,11,-8,-54,55,-69, 
  /* [14][0][][] */ -15,23,21,-88,34,-13,19,38,2,2,-19,-12,-20,-45,19,-35,-41,-34,-13,-57,-72,-7,-60,-17,31,-127,-18,7,27,-110,-33,-34,-20,10,-64,-103,5,-29,9,-63,-39,-9,2,-13,5,-49,-6,31,-41,-46,-7,43,-9,-20,-34,-2,-8,34,-66,-14,-39,-35,-83,-4, -22,20,6,-6,-22,-54,8,3,26,-17,41,10,-43,-12,-4,-37,-47,-54,-2,-33,24,20,-48,-20,-4,-12,-32,-2,27,12,-33,6,-37,4,42,-2,-24,-18,-3,-16,-16,-54,-14,34,22,-19,17,2,-9,12,16,-20,-21,-24,-2,5,-52,20,-15,8,34,-12,-5,26, 30,-20,18,5,-31,-10,-66,-54,-12,-15,-5,-8,-51,-83,-29,-47,28,-20,20,-18,20,-33,-25,8,5,33,19,-19,27,-13,-18,-52,-38,-3,36,7,-12,5,-19,-6,-18,-30,-19,-68,38,-43,-26,17,3,24,-25,-17,-17,7,30,5,-47,23,-26,-32,12,-6,3,12, 
  /* [15][0][][] */ 14,0,-126,31,-21,-13,-88,-77,46,7,5,-3,33,-32,-70,-24,-73,-37,-38,-25,-58,-100,-5,34,-15,28,2,-46,5,-7,42,-25,23,-74,43,-20,-8,-72,-14,5,37,16,34,-13,-31,16,20,-53,25,-53,-65,-68,-18,58,-70,63,17,-4,-65,-41,-68,0,-38,2, 10,-37,-31,25,-56,-19,-105,-48,39,14,44,-49,-4,-88,-127,8,-24,-41,-9,-41,30,-104,-16,-50,-12,47,-11,-36,-10,-4,-21,-44,-21,-38,-23,-23,47,-52,-66,-61,-82,-6,49,-61,-59,-31,-34,-69,25,-63,-28,-97,-28,2,-21,40,-61,9,-7,28,-41,6,11,-65, -32,1,-58,20,6,-29,-87,-3,27,-1,23,-54,-10,-39,-40,38,32,-7,20,-21,20,-28,23,4,30,9,31,6,-9,-27,-21,-36,-29,23,-11,18,-12,42,-36,-55,-42,57,5,-52,34,33,4,14,17,-43,-12,-5,7,7,-19,-12,28,-28,8,12,2,-32,7,-3, 
  /* [16][0][][] */ 5,-22,42,-101,-55,16,-7,-10,-112,5,-68,-42,-12,17,-80,-33,2,26,7,14,-26,-50,-2,-28,69,16,61,-82,-12,5,-111,-41,25,-30,27,14,-28,28,-65,32,-4,5,50,-13,3,-11,-37,25,-5,-3,-40,-36,-39,2,23,23,-31,40,28,18,37,-53,60,26, -62,43,-11,-2,21,28,-55,57,-44,14,-127,-30,16,9,-15,-76,-24,6,28,-35,-28,-70,29,-27,-15,-26,4,-20,-43,-10,16,-13,13,-70,-45,-35,-15,-28,-77,4,28,-27,-20,-89,7,-38,-49,-44,-5,-6,-18,-31,-30,80,-7,86,-53,21,-10,40,-26,-19,-68,9, 50,9,11,-12,6,18,-20,14,17,-32,-28,-20,15,-14,18,-36,-76,25,-23,-43,-30,-8,7,5,46,-91,-29,-28,-1,-20,52,-12,-32,25,-18,-32,35,-38,1,9,-9,2,32,-14,37,-48,52,-1,-63,54,-37,-41,-28,-43,-72,1,-61,-14,0,-69,-31,-27,11,-3, 
  /* [17][0][][] */ -11,-117,10,-65,-2,28,5,-14,-47,-10,-84,-59,-41,28,-32,50,19,-26,-63,32,23,-28,7,-18,-2,84,53,-42,35,9,-43,-40,-1,-46,0,5,-57,14,-37,28,-5,5,49,-54,6,-15,-60,52,43,-104,24,-44,-42,-61,-48,-114,-15,30,-30,33,26,-2,28,5, -50,39,-62,-18,11,11,-29,0,-32,-15,12,-15,7,-49,-29,-86,-118,-124,0,19,-23,-78,17,-40,-25,-14,-105,-33,-17,9,-26,-15,-39,-1,-65,-61,24,-12,-87,-1,8,-3,34,-49,5,-20,-84,-81,-30,81,-64,-22,-88,-34,-27,-38,-83,-7,-19,-56,-78,-13,-82,-23, 46,37,44,-19,17,-127,6,1,30,-113,-32,-43,9,-13,31,-29,-72,-23,0,-33,-72,-36,-63,27,16,-94,-43,-1,-43,-80,56,7,-19,7,-32,-37,25,-76,-16,14,34,-35,39,-51,55,-56,39,4,-67,27,-45,-20,14,-7,-80,-58,-49,-50,-33,-18,27,-16,-32,-19, 
  /* [18][0][][] */ -9,-15,-3,-12,21,-54,25,34,13,11,9,6,15,-8,-5,-14,15,7,20,36,-34,19,-56,-36,-4,-23,-16,-40,-14,-9,-1,9,0,20,6,-15,-4,21,48,24,60,-17,6,9,4,-44,-14,15,-46,-10,-57,-45,-19,4,-17,35,-31,-24,-79,-1,-57,-27,31,36, 15,1,8,-27,-9,21,-31,-45,25,-54,19,24,-70,-5,-14,11,-4,12,-29,-66,16,-1,-66,50,31,-88,13,17,-18,-49,-19,-3,28,-13,15,-57,7,-46,5,-30,-4,-52,-95,-14,-23,16,17,0,-71,-25,0,13,20,8,-32,22,27,-26,25,9,-46,-13,-43,49, -7,-41,-10,-47,7,-10,27,5,-16,-44,-28,-40,41,-29,-24,6,-16,3,22,-33,-48,3,-24,32,3,-127,-33,-22,-6,-32,2,1,33,-1,13,-51,-8,-5,-9,34,52,30,-29,31,18,43,-14,-8,-50,19,3,3,13,-6,-13,-4,-5,-66,-60,8,-17,-52,-36,-3, 
  /* [19][0][][] */ 0,-29,13,-20,-53,8,5,-5,-28,-9,-77,-29,-14,12,-22,-26,14,-8,11,19,-27,15,-4,-8,-19,-18,-30,-127,2,25,35,15,-12,-109,-38,2,-5,30,-57,-11,2,-16,-48,-32,6,-57,6,-31,0,-41,-29,-18,-64,-28,-11,31,-57,-14,1,8,9,30,-36,8, -27,19,-74,9,-53,-15,16,17,-17,-2,-18,-5,-24,3,4,12,7,2,-12,19,-40,12,-17,-29,-65,-5,-34,-67,-95,-21,-26,12,-46,-9,-22,26,-64,-36,-23,-11,-61,9,-10,3,-52,14,13,-30,-34,-19,-23,8,-20,-11,-118,6,-29,-30,12,-15,-29,12,24,-62, -58,6,9,-13,5,-56,5,3,4,-9,15,2,-29,7,26,21,-61,-49,-55,4,-21,4,-23,-14,-67,-18,13,3,-54,-55,-20,-29,13,-3,-6,-50,-33,-65,7,-51,-33,-31,-45,7,-40,18,-3,2,-26,-44,26,25,25,0,-24,-2,9,-9,-33,15,-36,-27,3,-10, 
  /* [20][0][][] */ -1,-2,-15,-13,-30,27,-25,-23,-72,-1,-15,-13,-72,-6,-8,21,31,12,10,-15,14,11,8,26,-33,11,2,16,1,-19,-83,-79,-10,-43,-9,5,-32,0,3,-49,-14,-12,6,-51,5,-48,-127,19,24,-29,20,-25,-4,-30,-27,-30,-18,34,-21,26,13,-28,-10,27, -4,-35,-27,-5,1,9,-23,-23,-36,-50,-11,-35,8,-21,4,-68,0,-22,-29,-1,24,-20,-5,-26,12,6,-8,-33,8,-14,-27,-36,2,-21,-41,-48,6,5,8,-12,0,9,17,12,-20,-40,-35,22,14,-10,-66,-23,-46,-37,-16,-35,-42,-26,-33,-32,7,-39,8,29, 11,11,3,-33,1,-27,-21,3,-27,-56,-9,-52,3,-13,-10,-59,-17,-38,36,-27,-19,-47,-43,-15,3,-1,-17,-6,27,-28,20,-71,31,18,-49,-90,28,-32,-13,-6,9,4,7,-58,13,-42,2,6,-49,-2,-25,-8,-6,-28,2,-25,-24,7,-46,-47,-22,-72,-25,-28, 
  /* [21][0][][] */ 15,40,-81,-55,7,-6,-21,27,-39,-20,-18,-21,-82,-99,-6,21,0,67,-74,24,-4,-38,-4,-13,46,67,-42,40,-28,-27,-96,-57,-74,-31,-34,7,-103,26,-36,-63,-27,-7,50,-44,-43,-56,-125,34,32,28,10,44,4,-11,-63,-3,-23,-23,-26,5,-9,-62,-47,-9, -11,-3,-45,-12,29,-16,-20,14,-64,-19,9,6,-22,7,-1,13,6,-52,17,25,13,-59,20,-6,8,-53,56,-9,25,-32,-38,-50,-10,4,15,-25,-7,44,-17,9,9,-3,32,31,-16,32,-32,9,4,-23,19,3,-19,-118,-13,-77,-22,0,-46,-13,36,-101,-2,53, 48,61,-23,-12,-13,11,-65,-8,2,-100,-10,-16,4,-44,8,-11,-1,-7,21,-26,22,-18,-35,2,-24,14,20,-23,64,-62,55,-22,-28,-36,15,-8,43,11,-64,-2,28,40,-72,-127,37,-21,-17,23,-5,10,-23,-20,-34,-34,15,-46,-36,47,-51,-12,21,-31,-30,16, 
  /* [22][0][][] */ -33,9,3,-45,46,47,8,3,16,0,2,13,35,8,-10,-39,-72,-101,-76,-34,-64,-35,-9,-51,-11,-6,-14,-38,-106,0,-33,-13,-17,-11,48,14,-20,-104,-2,-13,48,39,31,-2,-75,62,37,-54,-93,12,-45,-9,-39,-30,-40,24,43,-7,11,-26,-55,-41,-63,24, 55,49,-6,-5,1,-6,-48,-16,37,34,-18,-48,24,-49,35,-23,-102,0,12,-35,-14,16,25,-127,36,-3,-50,3,-45,-12,39,-13,-30,-40,-1,-51,-13,-53,50,-3,39,43,-6,-1,48,-34,-45,6,-99,39,-1,1,-7,74,41,57,-11,-24,-14,-50,22,-20,61,63, 57,16,-16,1,9,-94,-58,34,43,12,-69,-17,21,-71,-48,-23,-41,-20,12,-48,-76,-30,-7,-62,11,-2,-31,-2,-41,45,42,24,38,34,-113,-45,3,3,-63,16,-69,-2,-26,-75,11,-44,53,-75,-6,-15,-41,60,-14,-3,43,-5,38,-51,12,-39,-41,91,90,-5, 
  /* [23][0][][] */ -13,-25,-38,23,-47,-19,2,2,-22,-8,8,-4,8,14,-32,4,1,-28,-14,23,-11,1,27,-43,-43,8,-8,-31,-13,9,-2,-5,17,6,-35,26,-40,-2,12,20,-16,-6,11,11,-3,13,20,-52,9,-2,6,-22,-34,8,-15,41,-5,-10,1,-20,-59,-6,30,-5, -8,-2,-6,-24,13,-6,11,9,-32,11,-2,23,-21,1,3,-4,-40,-4,-3,-13,-56,5,-48,-28,-14,-23,-3,10,25,-39,-49,-34,-8,-4,-14,2,-8,-89,-14,-34,4,-5,-37,-6,10,5,-20,-6,-30,-16,-17,19,-5,-34,-17,-13,4,26,-5,18,6,-33,-17,1, -32,26,-36,15,-17,16,-19,-7,-8,-2,22,-2,-32,-36,21,4,-53,14,-48,-11,-23,5,-7,-47,-50,-12,-13,-8,-64,-56,-20,19,-11,-11,24,-2,-127,-105,15,-33,-4,-85,-39,6,-28,-1,-29,-49,-47,7,4,11,-28,-64,0,-10,-1,-43,8,5,-35,14,-10,-22, 
  /* [24][0][][] */ 6,21,-56,-2,-5,9,12,9,9,12,-28,-41,14,47,-34,-60,-8,-8,11,32,-43,-12,17,-16,-34,-28,-48,-32,-57,15,7,15,0,11,-17,-8,-71,8,-15,-26,-19,-6,16,49,-6,-35,33,-78,-20,-48,4,52,25,21,18,41,-33,-15,-11,-42,-23,-2,-23,-29, -45,-22,-20,-5,0,-66,17,7,4,8,14,2,-7,-1,-11,6,-30,-6,-35,47,-76,6,-51,-40,-41,-48,-13,-4,-24,-62,-17,-57,-17,-8,-25,18,6,-63,21,-46,-49,17,-11,23,-14,16,20,-13,-10,31,-5,11,-19,18,-51,24,6,-32,-1,-4,-9,14,-56,-55, -54,30,5,-44,-13,-70,-32,-3,29,-50,-3,-1,-53,-15,30,16,-11,15,19,-30,-67,24,-100,-15,-57,-85,29,4,-16,-93,-48,-11,-10,2,-10,-18,-36,-39,50,-45,-50,-38,-127,-2,-37,3,-24,-23,-25,12,9,4,-5,-35,-35,0,21,36,-4,33,3,-13,-70,-18, 
  /* [25][0][][] */ -9,-34,7,35,-16,-18,-61,22,-38,50,-16,-27,24,31,-41,-34,-1,4,-3,10,-56,-96,3,72,59,-36,51,-85,-29,55,43,-51,36,-115,-127,20,21,16,-28,-4,-93,22,9,-30,16,-85,11,-36,-31,-24,-80,1,-73,36,42,74,-31,-76,-41,-27,-30,-24,-11,-31, -37,-120,-102,6,-66,9,14,59,11,40,-34,-1,-30,7,-26,-22,-39,0,-49,66,-30,-32,14,39,-49,31,-38,-94,9,-105,-20,29,79,47,6,-10,-87,-24,53,-37,-16,-42,20,39,-32,-19,-35,10,17,-55,-64,16,-117,41,-45,-7,16,-13,-55,2,-18,-75,37,-1, -21,-20,-48,17,21,43,-6,-60,15,-53,-25,73,-63,39,43,-48,-56,3,-40,-114,-27,20,-24,1,-13,9,-22,-61,36,-30,36,-22,-26,4,28,-38,-56,13,21,-27,5,-77,-29,3,17,43,10,-9,-23,2,-55,53,-73,74,-37,41,69,38,-38,26,-36,15,-62,10, 
  /* [26][0][][] */ 38,-16,19,-94,-54,32,-23,-26,-34,-14,-62,-2,-37,27,-40,50,26,-5,-38,57,-2,-3,34,17,-70,22,-38,-49,-5,29,-43,-13,1,-46,15,5,-81,38,-18,29,17,7,-9,-15,-21,-14,-71,15,29,-22,15,4,-31,-20,23,24,-5,48,1,16,-5,-47,-37,-4, -55,28,-80,-30,-41,-17,-51,15,3,36,-85,-14,-7,6,-93,-120,-70,-4,15,7,66,14,-22,-33,-22,-28,-7,-56,-82,-21,-41,-3,16,-11,-48,-24,-47,-21,21,-4,-68,-96,-5,43,-43,-49,17,-111,-13,9,-56,-32,-38,64,-46,79,-82,-40,-3,-55,-68,-27,-49,-8, -23,43,29,4,35,-127,5,9,22,-37,49,39,33,-36,-39,1,-107,-41,6,-32,-43,10,16,-8,28,-47,-20,21,5,-34,68,-12,-4,11,-66,-95,14,-72,-29,-28,-9,21,56,-13,53,-3,62,29,-113,26,30,46,39,26,-53,12,-44,-44,-91,23,-38,-27,-49,4, 
  /* [27][0][][] */ -41,5,18,-69,25,21,34,10,71,4,-25,2,-94,-71,9,-1,-70,-106,-22,-124,-66,29,-69,-69,-43,8,-27,-2,25,-52,-78,56,10,11,28,-6,8,-127,5,-57,-27,-79,-37,-2,-44,-23,-4,24,-19,56,3,43,18,-110,-22,-74,20,-13,-20,-16,-67,47,-86,11, -42,13,-35,21,-32,-27,-17,-48,-28,6,12,24,1,-82,7,20,-25,4,20,-32,25,11,-66,-1,-74,-3,-7,8,-101,2,-29,-21,-61,5,33,18,-58,49,21,-69,-35,-49,-58,-1,16,-38,3,-17,-30,12,-25,-36,-29,-66,5,13,-4,-90,-16,22,-1,8,-14,-15, 34,-119,-29,12,-64,-13,-31,-33,-90,-94,-33,-109,-9,-42,-64,-22,28,26,1,38,19,-106,29,45,17,-8,-2,-26,49,0,-25,-97,-49,-13,5,8,22,43,-31,-33,29,-13,-3,-68,-12,-18,-81,12,9,8,-70,-45,-41,-20,-26,-68,-15,41,-39,0,17,-91,4,42, 
  /* [28][0][][] */ 41,-25,-46,-40,-12,36,24,7,84,-52,-97,-5,-79,-30,10,8,-8,6,-42,-33,-14,28,-56,50,31,-70,-68,-27,71,-116,-35,-26,-21,96,-15,-28,-15,-63,50,-25,-63,-95,-22,5,-18,44,43,16,-15,-26,6,17,11,-79,-85,-55,20,19,8,-29,-16,-101,18,68, 2,10,14,-30,-90,2,4,10,38,-1,-3,12,-9,-57,34,-23,-70,4,-19,-103,-26,-1,-21,-92,1,-29,17,-10,-37,14,18,51,-29,-36,69,45,-3,-87,1,-62,-75,-65,-37,45,-59,49,10,28,-106,-6,-3,30,-68,66,-84,62,16,93,46,3,-48,31,-45,-23, 16,-12,-80,45,-55,-33,-22,-79,-83,-51,55,-82,-84,-41,-49,36,44,74,-9,2,16,-85,-118,45,-48,-84,-34,-127,89,-109,-70,-91,-90,-22,-52,42,-30,10,-4,-113,-10,-89,-60,34,-77,14,-2,-6,-28,105,-54,-1,23,-118,-91,18,-12,-30,-34,51,50,-34,2,7, 
  /* [29][0][][] */ 70,45,-9,-14,28,-40,-6,-2,-9,-30,-3,-14,-63,14,35,-25,-1,-54,1,-10,-86,14,-35,-1,12,-62,-57,-24,-77,-44,24,-5,-25,-30,-28,6,1,-65,-59,-11,0,3,-37,-18,-12,-19,15,-4,-34,48,14,12,-33,-1,-74,26,-94,-45,-32,-28,-20,-6,-10,-11, 0,-16,-6,1,9,-4,-17,-102,-9,31,-3,-15,-18,-22,-10,-43,-51,-42,51,-10,-20,-12,23,35,-8,-25,0,-31,-85,22,-33,-12,27,4,11,6,-40,-49,-19,2,38,25,-83,-5,-15,20,45,-53,8,-51,26,-30,17,-62,-16,-25,-65,-127,12,-6,-64,13,2,39, 49,-25,-45,-14,-76,-4,26,-2,-6,-4,-1,22,5,-18,-12,-5,-18,28,-41,48,-87,16,2,23,47,-25,22,-28,-68,19,-2,-6,30,-42,-8,39,-38,10,-2,1,5,-25,-27,-19,-10,-61,-38,-90,9,-53,-48,-42,-43,-50,15,-32,-26,-20,29,-42,32,-16,53,-3, 
  /* [30][0][][] */ 29,-6,-103,24,21,-25,-19,-25,-7,27,19,17,38,-12,-24,15,-88,-87,-45,-10,-43,-56,17,-29,-36,-65,-89,-16,-61,0,29,-29,34,48,-28,-20,-29,-45,8,-5,-2,-8,-30,23,-24,15,-38,0,-36,-77,30,56,12,5,-50,94,35,-66,-22,40,-69,-42,18,-9, -8,36,-64,-18,-10,-37,-50,-41,21,12,-11,10,0,2,-9,2,-62,-34,7,-7,-4,20,-47,-25,-61,-5,22,5,6,-10,3,9,-35,5,-12,-11,-47,24,-33,-28,-28,-60,22,25,-4,9,-26,-47,16,-27,2,17,-3,4,0,64,31,11,-57,-28,-38,-3,-67,23, -33,-46,-127,41,-18,-25,-16,-52,11,21,0,-4,-9,-75,3,7,-47,-9,46,-24,-24,3,-9,-8,-8,31,4,11,77,-43,7,-30,-56,50,43,6,-1,-63,18,-71,-47,-27,34,5,-1,-5,-11,-14,13,-75,18,-28,-55,52,-51,2,-9,69,-35,10,31,-20,-45,6, 
  /* [31][0][][] */ -24,-18,1,3,24,15,43,45,-38,15,-127,-12,8,38,-16,-115,57,-44,-12,-11,2,-5,25,-1,-8,0,-10,-47,19,-12,-23,30,37,-82,-41,-8,-24,-15,-12,21,-32,31,20,61,-18,27,-7,29,-10,-80,-59,19,-37,22,61,30,-58,35,-22,-5,-14,-1,-31,0, -40,21,18,-14,-7,-13,34,-49,-22,-5,-33,0,-21,28,-11,-35,-28,-82,-105,-48,-34,-7,-14,-51,-31,-64,-88,-55,-55,10,-3,-21,-101,-3,44,30,-95,-8,13,6,23,-7,-8,-31,-72,-43,0,8,-37,-35,29,-53,-46,45,-51,-27,14,2,-44,-37,-51,-6,-37,9, -35,-44,28,-44,-10,41,-44,-14,-20,26,-43,-70,28,-19,-94,-12,-21,-48,-70,13,17,-17,33,20,-36,4,-23,-66,-7,-22,-27,-2,22,-3,9,-5,-119,-8,5,35,11,27,12,-9,-38,76,-6,-2,13,-32,19,11,-47,51,60,93,2,12,20,-46,0,-17,23,53, 
  /* [32][0][][] */ 13,-82,23,-44,-86,51,35,51,51,-27,-34,23,-28,-27,-55,-27,44,12,-85,12,-36,-2,26,66,-29,6,-14,-61,51,38,52,-3,-16,-101,-56,17,-104,17,19,19,18,-60,-21,-9,-53,43,7,39,31,-36,-17,-93,-127,2,-9,58,-80,55,-36,25,17,-2,54,38, -18,11,-7,-38,-93,-8,22,22,14,-1,-1,15,-68,41,-6,-18,-29,-60,-58,-19,-60,20,8,35,-119,-28,26,6,-38,-55,-54,-11,-77,-80,12,-9,-33,29,-6,20,86,-57,-18,27,-42,15,-2,-71,8,-73,13,-78,-44,-10,43,-49,-86,67,9,33,-40,-67,70,-5, 38,-59,-42,-21,-105,-7,16,-76,21,6,59,-3,-62,-40,-23,19,-21,-42,-45,-54,-25,3,-21,20,-66,8,20,-41,-1,-16,-8,27,6,-41,40,12,-119,16,10,-12,-32,-31,-14,-57,-17,8,12,23,42,-38,15,-82,-103,-15,44,53,2,30,16,45,-6,-29,23,30, 
  /* [33][0][][] */ 16,-9,26,29,16,-62,9,-17,-1,-17,7,51,22,25,48,-23,-1,-23,-18,-31,-23,21,-23,-86,-2,-36,-2,-9,-58,-4,3,19,24,32,12,44,19,-54,62,-4,12,-50,-16,-25,-37,32,15,44,-74,41,21,-23,-29,-41,-4,9,-3,-47,-13,-57,-79,-10,15,-9, 24,-24,-12,-57,29,2,46,-35,-52,-8,18,-19,-69,1,-40,-19,-29,-48,-47,0,12,-48,-42,-29,6,-73,-8,-40,-34,-36,-100,-65,30,4,25,2,-19,-26,-25,-4,74,-15,-45,-47,-43,30,-8,-26,-88,-12,-19,14,-44,9,21,12,60,-26,-19,40,-36,-63,69,6, -17,-4,32,-17,33,0,5,-36,-24,5,-49,-90,15,-12,-4,-30,-65,-57,27,-116,-2,4,-13,-28,39,-55,30,4,-16,33,-49,-6,-9,43,-35,65,20,-72,-4,-12,12,15,38,-25,13,24,29,8,-127,-11,-18,40,26,-20,81,-61,36,-55,14,-29,-33,-55,11,-7, 
  /* [34][0][][] */ -17,-17,-16,11,16,23,5,29,-28,1,-50,-17,31,-6,-47,-84,35,-79,11,-46,-26,-59,15,-17,46,13,-75,-76,-71,6,-26,-41,41,-45,-3,-22,-36,15,31,25,-7,19,3,8,-19,-13,3,-47,-24,-43,-72,-7,-74,11,18,74,14,-68,26,-127,-69,-31,-29,25, -36,-79,-64,8,-76,5,-53,-68,19,19,-24,28,-13,18,-36,-12,-22,-68,4,-40,-48,-14,1,-11,-43,10,13,-80,-34,4,-17,-52,19,20,20,10,-62,-10,21,13,-31,-31,32,9,-84,23,-43,9,1,11,25,-21,-46,7,-50,56,47,35,-25,58,-13,-36,-58,4, -39,-52,46,-14,-4,4,-13,42,-29,2,33,-82,12,-72,-63,0,20,-9,-52,18,9,-73,29,44,-5,-13,-7,-56,47,6,4,-51,-8,-26,-4,-40,-80,32,-15,-8,25,-4,42,-23,-24,35,-6,27,37,16,-33,-6,-34,71,-51,74,-2,47,-101,27,14,-16,-43,72, 
  /* [35][0][][] */ -2,20,-68,16,-30,-20,-9,-13,33,14,-4,28,25,-37,-1,-72,-40,-67,7,-53,-33,-89,5,1,-15,-49,-102,-32,-65,17,24,24,18,-21,-1,-72,-36,-9,-56,-29,-4,-65,5,-14,-13,-13,40,-75,0,-22,-25,59,-55,-7,-68,-34,-18,-31,51,-114,-62,21,-20,-68, -64,32,3,41,8,12,-28,3,66,-37,-45,-22,31,-4,16,13,-22,-84,-8,40,-33,-89,-9,-20,-39,-68,-29,-13,-19,-54,37,17,-32,-50,-7,-43,-38,-28,54,-2,39,-22,-11,9,-38,-72,-50,-62,5,-2,-28,-7,-39,42,-36,90,15,31,-127,-81,-81,-17,-69,29, 7,-19,-60,-23,-16,9,-10,0,73,-20,-73,5,-58,26,10,-103,-82,-76,-14,77,-31,78,-15,-12,15,54,-20,-28,-28,-35,14,11,-31,-24,13,-3,-9,-56,-37,-12,3,-33,-4,43,-44,58,41,27,21,24,-40,-9,-3,69,-2,-8,22,-54,-54,-59,-123,29,-74,36, 
  /* [36][0][][] */ 2,-35,-54,51,-87,-65,13,-9,-10,-10,29,-21,10,20,-50,-13,-21,37,11,9,-55,-8,11,36,-41,18,2,-91,-65,20,4,0,19,7,-25,47,-61,-20,4,-1,16,6,-13,11,21,33,-4,-77,-12,-55,1,-73,-86,-59,-22,-29,9,-30,18,8,-27,21,50,-38, -1,51,-22,-11,4,-26,4,-6,-67,-13,10,28,-34,4,18,-11,28,20,16,25,-41,4,-20,-63,-88,39,-55,-7,-43,-3,-78,8,-26,-12,-62,8,-72,-127,-27,4,-24,-59,-41,-26,-31,-18,-22,-63,32,-56,22,55,-4,-90,31,-31,-5,42,-1,-9,-32,-48,46,-46, -91,69,-69,-15,-1,-61,-33,-2,-43,7,27,22,-48,-8,40,-48,-73,-5,-3,20,-41,-17,-74,-45,-25,-38,-22,-23,-83,-32,-23,12,28,5,7,-67,-98,-89,-32,-69,-7,-2,-34,-12,-58,-5,-3,-99,-43,-4,17,33,-50,-58,-12,-1,5,-58,-32,-31,-22,-38,-17,-42, 
  /* [37][0][][] */ 74,-91,-20,0,-53,36,-39,119,28,-21,31,47,-31,36,6,9,41,9,36,18,17,-26,70,127,59,-100,54,-41,34,30,58,1,50,-8,6,9,0,64,72,64,-36,-20,15,48,-5,-24,39,64,-31,67,-86,26,-24,-60,-65,-8,27,58,-19,17,14,-21,72,43, -8,-32,-17,-37,53,9,-63,15,0,-4,-37,-24,-25,-6,-10,-63,-7,-9,-26,-17,32,-31,-65,-30,12,-69,-45,-50,25,-51,-42,-34,22,45,15,2,2,-50,14,-35,19,-37,19,-50,-97,22,-46,41,-94,-6,-91,11,-42,7,-89,0,-35,-19,-16,-12,49,-60,-17,50, 29,-83,74,-48,-5,31,97,-20,-4,-56,-43,-23,45,11,3,-123,17,62,-25,-50,-10,-51,-1,42,-26,-41,11,-82,-36,-71,103,13,29,-53,17,-33,-32,34,18,16,11,53,-5,31,11,-49,-66,14,56,-16,-85,-29,-94,93,56,12,-13,39,-112,-93,44,-40,1,55, 
  /* [38][0][][] */ -56,-25,-12,-21,9,-42,-13,7,2,-67,-18,19,-61,-74,20,8,-54,-47,-40,-114,-9,16,-112,-64,-40,-127,9,19,-52,-36,-79,5,20,-1,9,-23,-19,-86,-5,-95,-42,-32,-62,-41,-102,19,-42,16,-57,14,10,18,-6,-37,-39,-48,37,-4,-71,1,-85,-92,-25,-11, -21,15,-63,-23,-36,-73,-20,-33,-75,-26,-10,12,-31,-70,-18,11,-4,20,52,-48,-54,-19,-69,17,-66,-118,-2,-3,-19,-24,-60,-46,-74,7,-5,6,-31,-15,0,-74,-49,-76,-46,8,14,9,-41,-14,-52,7,-15,-68,-15,-68,-33,-70,14,13,-69,16,-5,-2,-69,-7, 25,-53,-11,-18,8,28,-32,-14,-21,-57,-29,-79,15,-40,-46,-26,24,-13,9,35,17,-110,19,12,-34,13,-2,-84,17,-75,-51,-30,-5,-40,-17,-23,-34,33,-52,0,0,33,-2,-28,19,-5,-50,13,15,-21,-100,-34,-51,-61,-12,-77,-6,27,-10,16,-8,-81,3,43, 
  /* [39][0][][] */ 20,-1,-32,-3,-1,-14,30,-19,11,30,-59,-13,-11,24,-35,-41,-29,-21,-53,-18,-15,-6,1,1,-29,-1,-127,-32,-39,7,-12,-13,-35,-20,35,-1,-37,-38,-3,-8,16,42,-32,-2,-49,16,31,-46,-65,-7,-29,-1,-33,-28,34,1,-25,-4,12,-76,-56,4,5,3, 17,10,31,4,-3,17,12,-13,28,23,-2,1,-4,11,9,-25,4,16,-42,21,16,1,12,29,-40,-30,-44,-93,-42,-5,-1,14,-15,-38,10,-3,-87,12,-6,-2,-14,17,6,15,-34,-13,-22,-4,-5,-7,-14,-15,-41,5,14,-44,-17,-16,14,-47,-14,34,30,-35, 30,2,-22,-35,-43,16,3,-13,25,-24,8,-33,18,-61,-52,2,12,-23,-10,-56,-44,-8,4,-20,25,-45,-28,-49,-28,38,54,6,28,-21,-15,-30,-14,36,-79,-1,1,-26,-37,-70,0,-13,15,-17,-32,-2,-30,-35,-32,25,8,72,-3,-31,-1,-42,-10,-26,-2,-20, 
  /* [40][0][][] */ 52,29,23,-20,29,66,-13,-66,34,-11,-42,-4,-32,-9,26,-20,23,-32,-72,7,-18,8,15,-66,-30,-39,-47,3,-3,-50,-30,43,-6,-100,-44,15,7,-17,-25,-35,44,-68,-3,-26,-56,13,-22,20,-4,11,17,52,-8,-20,-41,-23,-33,23,10,-43,-1,-28,2,3, 40,0,-18,9,-80,-24,-1,-54,20,21,25,-10,-7,-22,-11,-78,-18,17,-4,12,-41,-26,-34,88,-56,-34,5,-113,43,-61,-23,-27,-85,-33,16,28,-37,-10,-24,-36,-31,-35,-16,51,42,24,19,-19,-33,41,-9,-61,-69,-3,-20,82,-20,46,23,-43,25,-6,-90,-41, -5,-26,16,3,-99,-42,-6,-11,20,-53,-32,-36,-34,28,-32,-6,-23,-16,-39,10,-76,33,22,22,-67,-4,0,-96,-44,-30,10,29,-62,-51,22,18,-121,31,-16,-8,29,-118,12,-12,-24,-38,13,45,38,-57,-103,-51,-54,-30,-119,23,-127,18,-30,33,-24,12,26,-16, 
  /* [41][0][][] */ -25,-29,-42,22,-77,-3,-6,16,-38,31,-20,-47,23,36,-88,-81,-44,17,-65,22,52,-22,19,10,-92,15,16,-71,-42,43,19,-24,28,16,-14,9,-109,9,-32,-8,-2,-4,39,29,-101,-113,3,-68,-18,21,-103,-43,-27,67,0,36,-78,-55,-16,-79,23,6,-30,-26, -22,17,-69,-17,-15,-76,6,13,52,2,-4,-15,2,-10,-39,-1,-106,-13,-46,-30,6,26,24,-15,-6,-28,-4,-19,41,-13,13,-50,7,-3,-60,-32,-45,-34,11,-2,-67,26,12,35,-17,-71,34,66,-115,-89,45,-52,-27,57,-96,17,-9,-33,-5,-41,19,-17,-118,1, -17,33,18,-68,20,-58,24,-40,45,-36,6,20,-88,-46,-9,7,-84,-70,43,-76,-46,-15,-76,-118,48,11,8,9,-13,-122,-42,11,31,25,-90,11,40,-116,40,8,-86,-29,-41,-82,-13,-64,-2,17,-54,28,46,-10,32,-127,-3,-124,-23,-41,-16,5,-88,4,-15,-58, 
  /* [42][0][][] */ -47,-65,4,-23,40,-14,-10,-13,-34,-70,7,-63,-26,-45,-30,-7,-70,-54,-30,-11,23,-75,-51,-74,42,18,-46,-52,-65,-38,-30,-91,-42,-39,-109,-52,-37,0,19,76,-11,-39,19,-66,19,-127,-42,-35,-30,4,-41,-78,-40,-15,-36,-32,-73,-54,-99,-106,-57,-34,-19,-9, 3,1,-12,-15,20,-32,-25,36,9,-32,36,-12,-10,-56,12,13,-1,-12,1,-17,6,6,-39,-6,22,4,23,11,-38,-36,-22,-26,15,-4,13,-3,4,-10,-11,-6,-37,-26,-9,-11,-39,3,48,47,-11,49,26,25,-13,-27,54,-36,18,-20,-36,42,21,-31,21,24, 15,16,22,-30,-24,-24,38,-2,31,-19,-46,30,-12,-5,9,-24,28,-33,-53,-36,-5,3,-20,2,-8,-13,3,-8,-18,11,14,29,18,-5,-43,22,-45,-21,20,-14,-38,-4,-12,-2,14,9,-26,-14,22,-1,-34,12,6,33,0,-17,17,-24,-10,-15,1,-7,7,5, 
  /* [43][0][][] */ 1,28,-20,-99,24,27,15,33,22,-45,-17,11,-48,3,9,10,-21,10,-14,-48,-61,11,-16,7,17,-16,-10,30,26,-37,-8,4,42,12,-7,-84,4,1,-10,-68,-69,-64,-65,34,11,-42,30,48,27,-13,4,64,9,-11,-16,-63,-13,0,-15,5,-17,-64,-13,35, -6,1,-14,29,-21,-59,-47,30,13,-17,25,10,-14,-30,-7,-15,-44,-39,-16,-2,-32,9,-48,-27,8,-14,9,-15,49,-17,-8,-12,-26,12,35,0,-10,-71,-29,-18,-43,-97,-15,15,-12,1,10,-8,-38,28,-26,54,21,53,22,41,-15,5,21,6,8,-19,-4,-45, 16,33,-61,10,-37,-19,-32,18,-21,-10,8,-17,-43,-44,-22,-5,-9,11,8,-72,-20,23,-51,26,-127,-24,-29,7,7,-27,19,23,-16,-46,-34,-17,-92,43,-62,-52,-35,-21,-70,-11,26,-122,-4,-34,22,4,7,23,-5,-32,30,0,-99,-22,-29,13,6,-17,32,-84, 
  /* [44][0][][] */ 13,-16,-3,-71,-71,-13,-48,-76,-21,-27,18,-19,-60,21,-31,33,-3,7,6,47,-20,-42,-35,16,3,-73,18,7,-2,3,-12,-50,-59,-23,-12,0,-27,9,-6,-48,-11,-53,14,-42,12,-82,-65,4,37,-17,14,-19,27,-22,-5,24,-36,11,5,22,-7,-4,31,-24, 0,6,12,-24,-24,16,-8,12,-47,32,-33,-38,-4,-20,-41,-5,-17,4,-11,-1,-10,-1,21,-19,-80,17,-17,-8,-5,22,-39,-49,8,-46,35,16,-70,-4,-4,21,11,-7,8,3,4,-25,14,-25,17,27,-34,-12,-46,-35,-27,-10,-59,2,-18,-26,-30,3,-56,7, -66,47,-57,1,31,-17,5,36,-17,15,-9,22,37,-10,-13,-67,-127,-77,-2,7,-4,-50,17,-42,20,-9,-16,9,-5,-20,7,-39,39,45,-47,-61,-19,-11,-22,2,11,4,24,6,50,-53,27,-66,-39,10,-57,-10,-16,11,8,-8,-44,40,-58,-13,-3,-45,-7,11, 
  /* [45][0][][] */ -12,-5,-47,-32,-46,10,-31,-29,-97,25,-14,-18,-103,-30,-53,30,16,18,-6,-6,21,-37,-32,23,54,-8,28,-14,39,-29,-104,-52,-54,-41,21,2,-96,3,-24,-48,-58,-21,20,-25,21,18,-90,2,-12,11,22,-13,-17,-89,-3,-79,22,33,13,9,4,-17,28,8, -28,-31,-15,-23,6,15,7,13,13,7,-47,-49,-16,-7,18,-72,4,-67,-10,32,-21,-20,-20,-2,27,8,-83,-16,21,-3,-13,-34,-20,6,-25,-63,14,7,-48,3,34,6,18,8,-45,-10,-55,-21,10,16,-81,-47,-30,-1,-39,-52,-13,-37,-58,-45,-10,-20,-18,22, 7,48,-10,-47,12,-44,-11,36,-19,-47,13,-54,20,-28,-11,7,-114,-28,17,-8,-55,-23,31,-36,4,3,-29,6,-24,-35,-17,-50,-10,44,-39,-127,14,-74,28,-14,28,34,5,-40,13,-64,29,-32,-51,2,-38,-30,22,-24,-24,-69,-15,-3,-89,-18,-61,-48,-52,28, 
  /* [46][0][][] */ 2,14,-51,17,-11,-46,-29,-8,-16,-19,-19,-77,-14,13,2,-58,-57,-34,-19,-35,-44,-31,4,-12,-39,-76,-83,-45,-77,14,40,8,34,-61,-58,-61,14,-51,-33,-21,-55,-19,-50,-35,32,-98,-1,-72,-42,-14,-32,15,-81,-4,58,2,-37,-79,23,-75,-61,-7,22,4, -8,39,10,-21,-3,4,58,-89,-1,-23,10,-27,0,-6,-21,50,-32,-33,-2,22,-10,-14,18,-49,-14,-35,-86,-53,-102,-19,45,14,-30,-64,-32,13,-22,-14,-30,9,-9,16,-49,14,11,-37,41,-98,-34,22,-29,-38,-41,-48,-26,-22,-35,-28,-32,25,-20,14,53,-15, 6,19,-24,12,-7,18,-11,-3,3,-8,-70,21,-16,-2,25,-48,-55,-3,24,54,-37,17,-31,12,10,23,-85,-74,-5,7,-33,-2,-97,-127,56,47,-2,-52,29,-7,-59,-29,7,16,9,-10,-23,-50,-12,44,-23,-11,-85,-20,3,-53,-80,-23,15,-49,-37,-12,49,1, 
  /* [47][0][][] */ 10,3,-45,2,-81,9,-1,4,20,6,-18,-13,28,37,-26,-27,32,-9,42,21,37,65,12,-5,-35,1,-42,-84,-60,3,20,31,-17,-12,-45,27,-37,48,-64,10,-9,4,31,29,7,-41,24,-36,-30,64,-29,-47,-72,53,-19,67,-46,-40,29,-29,25,42,9,-40, -29,-6,-38,-10,24,-49,63,13,20,-7,17,20,-17,10,-1,-17,-53,-6,-11,-5,-43,-8,-49,11,11,2,-70,-14,22,-62,-18,-93,-34,-6,-56,7,-1,-101,32,-25,-15,-61,14,13,-43,33,32,-7,-54,-60,-34,11,-1,67,-23,-4,-46,38,-52,18,52,-75,7,16, -67,29,65,-99,6,-50,-5,6,37,-39,20,-12,-87,-28,10,29,-127,-6,-29,-54,-2,22,-65,-61,22,-96,-15,-11,-25,-82,-73,10,12,-38,28,-60,-3,-127,-13,-55,1,-88,-38,-14,-35,8,-2,-23,-45,29,-2,22,-8,-113,11,-87,4,5,-37,-13,-97,-16,15,-16, 
  /* [48][0][][] */ 64,-39,-28,-9,-36,-52,13,69,-4,-29,8,40,-61,-8,-1,-16,26,-7,22,-102,-86,39,-127,58,25,-24,20,-27,27,-107,-17,0,-47,39,-51,-22,-63,-22,24,-64,-53,-104,32,70,59,12,19,31,-65,-67,-8,5,-4,8,-38,-15,5,21,-9,-18,27,-127,53,-36, -30,-2,17,-3,-22,-47,33,0,-8,-11,12,-3,14,14,-24,-1,-50,-46,-8,15,10,-4,-23,32,-22,-15,-41,-7,0,-38,11,-6,72,-14,26,-17,-24,17,-24,5,38,-99,-2,-18,-18,-19,-7,-4,26,13,-17,-2,2,14,-29,3,-18,38,2,-38,-74,-36,54,-25, 86,15,-6,-25,-20,11,-18,-89,-27,-47,-5,14,-111,-56,18,13,4,14,-46,-44,-40,11,-107,0,-110,-85,-12,-1,-3,-126,-12,-10,-53,-32,15,-28,-46,39,8,-21,-26,-58,-62,6,28,41,19,4,-64,8,13,12,-28,-77,-41,-26,-3,-49,14,7,19,-55,46,40, 
  /* [49][0][][] */ 20,-9,-106,-84,56,-57,-80,61,-48,-20,15,-30,-116,-120,23,-47,19,57,-103,-21,-33,-90,-102,-25,61,38,-39,-56,53,-55,-91,-47,-89,23,9,-46,-20,-39,-54,-127,-63,-18,39,-64,18,-78,-94,-4,16,-12,-12,12,5,5,-44,80,4,43,-85,9,17,-38,-56,2, -37,-39,-51,-57,-16,-15,-9,70,-28,-32,32,4,5,0,-7,43,13,-50,26,3,14,-24,17,44,24,58,38,31,51,-40,-52,-23,-44,14,7,-53,-15,14,50,27,-9,-51,-3,-14,17,39,-24,2,-29,86,-9,26,-8,-108,-11,-57,-30,40,14,41,-25,-13,42,74, -6,74,-31,-91,0,-1,1,-45,-18,-78,29,15,7,-34,37,11,-16,-22,17,-112,54,3,1,-8,22,33,-87,4,38,-10,35,-43,30,-18,-11,-44,20,4,39,14,44,72,41,-40,34,51,-2,-13,14,7,11,-3,-42,-35,28,-52,9,-24,1,-23,37,-49,-61,10, 
  /* [50][0][][] */ -39,-10,-63,-15,-26,20,-15,59,-68,-2,7,35,17,-12,31,14,-27,11,-19,29,37,-44,34,20,9,-5,-27,-103,-44,-6,-19,-13,16,16,7,-17,-56,41,-93,12,31,12,10,24,-50,-16,-30,-80,13,54,22,-36,-72,-17,32,54,8,31,9,-23,11,-4,51,11, 48,-31,2,-5,-82,-20,-19,46,-39,-21,-2,-43,10,27,39,-8,14,15,24,-13,-74,-48,-39,31,-68,-34,26,-127,-14,-38,25,-16,-14,-2,-43,-42,-19,-38,9,26,24,-9,-5,-51,6,-21,23,6,-35,-2,-103,-80,-30,-35,-106,-54,-29,17,1,3,53,-36,18,2, 49,-27,-2,-20,-21,2,-9,3,-48,-118,20,-23,-56,-40,-18,-28,20,54,44,-10,-2,-74,11,23,-17,5,10,-63,-16,-46,32,-22,-59,-102,-7,14,-22,36,-35,0,-30,48,-23,-25,35,-83,7,-8,19,33,-72,-63,-53,-60,9,-101,-86,-22,-40,-7,-1,-20,-35,-1, 
  /* [51][0][][] */ -47,19,-20,0,13,-101,-9,-38,3,-38,2,14,-63,-53,30,2,-39,11,-25,-6,24,-4,-55,-7,8,-15,11,22,-13,12,-127,-45,-22,-12,2,1,-17,11,1,-122,-21,-80,-45,-64,2,-22,-51,-3,-11,19,18,19,26,-54,1,-46,-5,-13,-45,3,10,-53,-32,-43, -13,-37,-40,10,-41,10,-23,-42,-18,33,9,0,-48,-20,-37,35,16,12,-2,-21,-21,-36,-30,7,9,-65,-9,7,40,-20,-37,-74,13,-19,-20,26,-33,11,-9,-25,-81,-61,36,10,16,-7,-85,18,-4,-12,25,-37,-8,-31,-23,-86,4,34,-7,1,0,-64,-21,-1, -19,-11,-7,-20,34,1,-32,2,-88,-114,-36,-62,3,-46,11,-9,14,-85,-4,28,28,-69,18,-41,-9,3,-37,-20,-23,-60,-33,-65,1,-12,-42,-48,29,4,-85,4,30,16,-1,-33,18,-51,-97,-8,5,12,-94,-9,9,-75,4,-94,-47,24,-62,17,1,-81,-28,44, 
  /* [52][0][][] */ -15,6,16,-30,-4,15,23,-15,-27,-32,-4,6,-57,-9,10,28,30,-14,-29,-15,-3,-7,-24,11,-11,-39,-13,13,24,-35,-67,-12,5,11,16,7,7,19,3,-23,29,-18,-50,20,-23,-4,0,1,-24,1,8,39,15,-48,-20,-8,16,14,4,45,6,-21,-30,26, -22,-17,7,-37,-2,-3,-9,-5,-2,-35,29,0,-15,0,12,-3,9,34,52,12,-43,7,-4,-7,-24,18,-7,8,-10,-21,-15,0,-14,12,24,-23,3,25,-30,-5,27,-37,12,-16,19,-57,17,2,-20,-18,-2,-5,10,-100,-7,-4,-14,39,18,-3,7,-28,-2,-9, 21,25,-59,29,-54,40,-64,-30,-13,32,22,-54,24,-59,-4,-15,10,-13,-11,-31,32,-22,19,1,-57,26,-9,-28,15,19,-27,7,22,-57,38,-16,-1,-11,-64,-14,-14,-33,-45,-22,31,-113,10,-3,-17,36,13,24,-50,9,39,54,-127,37,22,2,20,1,-20,-30, 
  /* [53][0][][] */ -46,-42,-19,-39,27,28,77,7,-103,-37,2,9,25,-43,-116,-32,-30,-1,-89,49,14,-41,23,-49,-12,19,-32,-5,-42,9,21,-19,40,57,5,-30,-106,19,-16,35,36,15,26,21,-77,75,-9,17,22,-102,14,10,10,24,-8,30,-7,-14,46,-29,3,18,7,31, -43,-48,-8,-18,11,-2,19,-50,-14,-52,-14,-40,-9,-20,-63,58,-62,-43,-63,17,25,-36,-27,-30,-33,19,-3,-12,-1,22,-41,-2,31,-44,-22,-14,-10,33,-73,6,17,17,-40,-60,-59,-22,-73,-54,31,11,-12,64,22,-26,28,47,-8,18,32,37,-51,23,-103,-52, -40,23,-127,10,-68,20,-55,-24,-18,48,-7,-7,-10,-55,-58,26,-64,-124,-119,30,34,-81,-19,-73,-115,2,0,-15,16,41,-27,4,12,-9,-60,-46,-119,-55,-73,-25,-38,-28,25,19,-97,-22,-118,-83,55,-117,-39,27,-25,56,32,40,-63,3,-36,-46,-94,34,24,-40, 
  /* [54][0][][] */ -17,10,-29,-27,-8,-57,-48,-39,-34,-83,11,29,-26,-43,20,21,-28,22,2,26,7,10,-15,-8,27,-87,22,4,-31,-6,-76,-58,-24,-34,5,-18,-42,46,-8,-94,-37,-33,-27,-55,1,-22,-63,-2,-12,13,16,-24,17,-27,20,-11,-10,-45,-14,8,8,-3,-37,-6, 15,-25,7,-56,-15,4,-16,-1,-8,5,-50,-36,2,-30,-12,-15,19,-1,14,28,-13,-35,-2,43,-47,0,-20,-5,-5,15,-26,-39,-3,-18,-27,-12,-6,-18,-39,23,18,-30,22,-9,24,-16,-44,-1,13,-48,-47,-9,-7,1,-2,-89,-21,1,-39,15,19,12,22,-3, -46,5,-4,-17,14,-3,-18,32,-28,-17,-45,-27,13,-20,-8,-127,-4,-109,8,20,-8,-72,-9,-80,4,11,-57,-56,-15,-36,-11,-11,0,-16,-35,-45,18,12,-22,-7,8,22,14,-19,20,-54,-26,-37,15,-4,-19,-4,-65,-30,-20,-78,-83,11,-41,-114,-48,-16,-26,22, 
  /* [55][0][][] */ 7,1,37,-50,-7,-73,22,-30,-40,-47,-7,10,-68,3,36,5,21,28,-4,-73,-50,0,-127,20,-15,-69,20,7,18,-59,-44,-11,15,-14,7,9,0,6,-16,-15,24,-81,-10,-23,5,2,-16,5,-20,-4,5,-27,0,-40,19,49,-1,19,-33,-3,23,-72,0,6, -4,-3,-30,4,-6,-71,32,-24,-57,-71,-19,15,-23,0,-3,-38,36,-4,-9,-59,-34,7,-96,4,-3,-28,-10,-22,9,4,-9,-26,38,22,-29,7,-18,-12,-2,17,18,-70,-1,-3,9,-1,32,11,-38,-29,-32,-5,-25,-24,-27,13,5,-20,-36,-6,28,-45,5,11, -35,3,6,-35,3,-12,-10,-46,6,-20,6,29,-61,27,4,5,-4,6,-35,-19,4,26,-78,16,-32,-35,5,21,-7,-16,-13,-24,-18,10,15,25,12,-24,27,-21,-6,-36,-44,-37,-57,26,35,5,-41,-16,27,31,10,-10,6,24,29,-11,11,16,-15,-53,44,-11, 
  /* [56][0][][] */ 8,-14,46,-84,-28,36,47,-32,-87,8,-26,-29,-75,40,-36,-38,41,-14,-39,-17,-31,17,-17,1,-5,-38,-6,0,31,-18,-46,-48,27,-31,-14,-15,-23,18,-16,20,-21,-127,6,2,-3,-20,3,35,12,-25,-17,-28,-16,-79,-30,-6,-3,40,37,-12,14,-22,11,27, 16,-26,16,-24,-76,0,1,-11,-10,-2,-20,25,8,44,-24,-33,-22,-3,-31,-24,-39,8,-25,23,-58,-19,-1,-7,-26,-31,-57,-22,35,-16,-26,48,-2,-54,18,0,33,-23,-1,18,-44,36,26,25,1,-39,-2,-79,-15,20,-68,62,6,19,-31,-23,31,-72,74,22, -23,12,31,6,-50,-23,-18,-37,22,-39,28,-15,-25,-5,-23,33,25,9,-101,-11,-9,35,-23,-7,-53,-12,-1,-3,22,29,-47,7,48,-33,-22,2,-5,34,3,-51,-28,-13,-45,-40,-100,16,42,18,-9,-15,30,61,27,5,44,107,65,26,7,18,17,-23,32,-40, 
  /* [57][0][][] */ -18,6,-22,-3,5,-25,19,-16,-13,26,14,6,-10,-21,38,-18,-77,-47,-63,-2,-19,-14,-31,-46,-47,-32,3,-18,-55,-8,30,19,71,-8,32,-20,-10,-54,22,-16,9,-87,-12,36,-17,19,-10,-50,-32,-6,-4,-18,-17,0,-21,-13,30,9,34,-8,-105,-2,6,-66, 21,-17,46,-21,19,-13,-18,41,1,-63,-30,41,-21,-29,30,-21,-13,-14,26,9,-67,-15,-25,25,-7,-74,14,-46,-13,-49,-2,6,18,22,-70,-52,-22,-38,-9,-14,22,1,-20,-18,30,-17,3,29,-109,-4,-62,17,-4,-61,12,5,25,3,14,18,9,-13,-1,3, -34,-25,-21,-5,30,-49,-14,-41,-16,-32,-30,-49,20,41,-15,-13,-4,8,52,-56,-85,-30,-46,-16,56,-127,-3,-58,-53,-24,-12,-4,5,2,-111,14,26,-113,8,-2,1,-4,-14,24,24,-17,24,-22,-93,33,-40,49,-48,37,66,-59,-9,-52,-26,-43,-21,-23,34,-19, 
  /* [58][0][][] */ 8,6,6,3,19,43,32,-35,22,-40,-76,-2,-24,-12,25,-17,-2,-29,-34,-101,-69,8,-38,-8,-46,-85,0,11,-59,-46,17,10,-60,0,47,-7,20,-54,1,-7,6,-44,-81,31,-21,-6,-34,7,-30,-23,-15,49,-12,-46,-27,-20,28,-16,-30,-35,-47,-17,-39,34, 9,-11,10,-71,0,-11,20,-37,30,-62,-127,-48,3,5,-6,-63,-7,-1,-11,-18,-29,21,2,14,23,-19,-39,-41,-36,-14,51,13,65,-38,-21,-24,-10,-55,-9,45,37,1,-3,29,-27,-26,11,-17,-17,-13,-21,-31,-57,-19,2,-12,-34,-4,-35,-48,-46,-28,1,33, 20,19,17,-80,12,-9,11,11,-10,-33,-40,54,-13,36,2,-33,34,-55,-31,9,-7,17,-1,23,16,-1,-77,-5,-24,16,0,20,21,-29,7,-55,8,16,4,19,-6,-13,12,66,-57,5,9,-8,24,-47,25,30,-15,-28,-23,5,1,-11,-36,-51,-114,-9,-41,-17, 
  /* [59][0][][] */ 36,13,-57,6,-25,-54,-36,-47,-63,-41,11,-28,-43,-50,-57,20,-32,26,21,5,-32,-60,-52,23,-3,-125,18,-6,-4,6,-9,-60,-56,12,27,3,-18,12,-18,-127,-25,-43,-27,-37,20,-63,-44,-8,4,6,-6,-22,-3,-64,23,6,-19,5,-18,17,5,-32,-5,-39, -9,-23,41,-26,-29,11,-4,-10,-31,-1,-29,-27,-55,30,-15,-40,15,-3,3,17,-32,-7,20,11,-13,18,12,-62,12,9,-25,-3,8,-22,35,0,-1,-34,-41,3,-5,-19,35,8,-5,-31,-32,2,21,11,-49,-41,-44,-53,-39,-43,-64,8,-4,-67,-12,17,-11,-8, -106,32,-32,-19,42,10,1,18,-36,2,-12,-48,-2,-3,-25,-125,-65,-108,-11,-3,10,-52,15,-97,22,11,-58,7,-7,15,-11,-2,21,40,-2,-43,-7,-5,-20,-1,18,10,4,18,9,-3,-23,-82,11,16,-64,-15,-9,-2,2,-33,-61,-14,-25,-100,-1,-6,-43,31, 
  /* [60][0][][] */ -23,-20,-23,-5,28,-36,-18,46,-28,-25,14,-28,-26,-55,-52,31,-17,26,10,-20,31,1,-41,-19,28,3,4,10,25,-21,-53,-65,-41,17,-45,24,3,7,-23,-59,-21,-15,4,-25,21,1,7,0,24,0,18,19,35,0,-3,4,17,-3,15,30,14,-27,13,-35, 8,-29,21,-13,-24,-8,25,-13,-37,-1,-80,-30,-40,10,1,-8,-8,1,-3,-31,19,-11,-34,7,-6,10,17,7,18,17,-32,-31,1,16,-17,-12,23,-8,16,-38,3,-23,12,-7,7,10,-25,-5,3,7,-28,-3,-4,8,-8,25,25,-21,20,-29,0,17,38,16, 1,-51,23,4,-9,-32,21,-7,-89,9,-61,10,-38,37,-1,-50,51,17,-38,-42,-3,-15,-21,-22,-23,-45,11,-15,-4,-1,-22,-34,30,14,-7,14,2,-20,22,-35,-5,-2,-19,-5,-30,14,-9,17,-54,-64,-32,-19,-14,18,-31,127,49,8,8,-49,-22,-10,44,-17, 
  /* [61][0][][] */ 33,-84,52,74,-38,-44,-109,-53,33,68,-127,16,-19,-15,14,-93,29,-40,16,20,-95,-23,5,-56,-41,14,13,-23,14,58,25,42,20,-49,45,9,53,-66,-1,33,-11,-27,22,92,-57,51,7,44,-45,-78,-53,-20,-35,41,-7,49,-42,-6,29,-9,-31,28,-17,-19, -44,5,27,2,-74,7,55,4,-71,-9,-72,2,20,36,-19,-125,26,-86,-58,-11,-5,-31,-4,-48,-25,-53,-72,-34,-2,-31,-18,-15,65,17,81,6,-67,8,-20,8,-2,-27,-109,34,-19,39,-63,-4,-54,-69,-23,-51,-42,-2,-17,-16,10,-48,19,-52,-51,9,-28,11, -17,-32,-1,-58,33,59,7,2,-112,-89,-101,-35,10,0,-31,-110,20,-65,26,1,9,-8,17,-83,7,-33,-38,-34,-55,-41,-44,1,56,-13,0,-113,-9,-33,-23,-10,78,21,9,0,-5,-79,16,8,-23,-89,-72,61,-45,-31,109,-57,68,15,-19,-28,-36,-55,-13,49, 
  /* [62][0][][] */ 5,1,-4,-21,-38,-63,-14,-18,-40,21,26,-10,-28,44,-24,20,-14,5,-59,-15,-66,-18,-65,-6,-10,-94,23,17,-11,-6,49,-38,-27,24,-54,19,19,-27,17,-59,-24,-75,-27,-32,-23,0,-15,-20,-90,-23,-4,36,-13,12,37,75,87,-2,1,1,-40,-8,-5,-37, -16,19,-3,-3,-4,-11,17,18,-26,24,-56,-5,3,-2,21,-31,18,8,-4,-26,-102,-35,-57,-29,9,-127,-34,-42,-32,-66,1,8,78,-43,-5,-15,-21,-12,-34,-32,21,-61,-36,33,-10,17,-25,10,-78,-60,-71,35,-75,-42,47,-9,-9,-39,26,-19,13,2,-14,-9, 33,-25,6,-13,14,-38,33,-27,41,46,-24,3,-47,41,-20,-52,16,19,-14,14,-59,61,-49,40,-10,-89,1,20,2,17,59,-21,-41,17,2,23,19,-50,89,-18,-29,-69,3,-34,-26,-28,48,19,-58,-15,-13,-66,39,-7,-29,114,22,-1,0,-37,-26,-26,62,-4, 
  /* [63][0][][] */ 40,-69,0,-34,-127,-15,-33,-14,-34,-23,-35,1,-22,48,-12,-53,9,3,-3,17,24,-43,-14,38,29,-45,-10,-117,18,26,20,-29,-16,-31,74,4,-37,53,-11,23,-36,54,24,-23,-6,-16,-23,8,16,7,-21,-127,-43,-42,-28,32,-31,8,-15,-28,14,11,53,3, -41,-14,-14,10,-63,18,3,43,-34,-30,-3,27,-31,7,-12,-49,-9,-5,-41,-12,1,10,-1,-20,-68,18,-75,-16,-67,14,-4,-11,14,-16,-9,15,-57,-27,-22,-12,-39,24,23,12,-1,-43,25,-83,-15,14,-48,-70,-35,-2,-17,25,-22,44,16,14,-21,-13,-35,-42, -16,-16,19,-31,8,7,-33,25,16,-20,22,-78,8,7,-47,-17,13,-9,15,56,11,-66,34,-21,-3,-22,-5,-42,66,-4,58,14,14,-59,-39,-43,-3,38,-47,17,37,-17,2,-17,62,-69,5,-31,6,25,16,-93,-101,33,36,-25,-59,13,-30,11,42,-11,-5,37, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 64,1,3,64 } };
const TfArray<64, float> quant11_scale = { 64, { 0.0063996263779699802, 0.010224179364740849, 0.0076082311570644379, 0.0063368501141667366, 0.0063377567566931248, 0.0042085261084139347, 0.0051229293458163738, 0.005331902764737606, 0.0033374994527548552, 0.007737819105386734, 0.0076662381179630756, 0.0052204877138137817, 0.0048235664144158363, 0.0050383312627673149, 0.0076740984804928303, 0.0054997080005705357, 0.0054412032477557659, 0.0057178214192390442, 0.0061144442297518253, 0.0095616579055786133, 0.01072612963616848, 0.0061664949171245098, 0.0046896794810891151, 0.01111583411693573, 0.0078280270099639893, 0.003878819989040494, 0.0054436139762401581, 0.0063211633823812008, 0.0040847375057637691, 0.0059299501590430737, 0.0064167445525527, 0.0053258286789059639, 0.0041590696200728416, 0.0051204240880906582, 0.005674055777490139, 0.0044151605106890202, 0.0067601879127323627, 0.0036468477919697762, 0.0087460903450846672, 0.0062325536273419857, 0.0051735201850533485, 0.0051048672758042812, 0.0066519151441752911, 0.0059628933668136597, 0.007763261441141367, 0.0080675045028328896, 0.0045363535173237324, 0.0063272025436162949, 0.0048515354283154011, 0.0048914430662989616, 0.0049304836429655552, 0.0093121053650975227, 0.0081735784187912941, 0.0049935788847506046, 0.0096157314255833626, 0.0077544413506984711, 0.0059925657697021961, 0.0058180522173643112, 0.0060916389338672161, 0.0079456139355897903, 0.0071604033000767231, 0.004137793555855751, 0.005022148136049509, 0.0050579877570271492, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[64] = { 906, 394, -1214, 533, -435, 1035, -2387, 380, 2234, -178, 352, -730, 928, -1567, -46, -59, -3352, 199, -281, 278, 469, 6, 951, 2224, 618, 125, -921, -785, -311, 465, 1751, 328, -1398, -2560, -507, -879, -246, 487, -233, -306, -2068, 190, 733, -540, 22, -2114, 1217, -705, 912, 8, -552, 25, -1236, 749, -421, -623, -2947, -360, -2133, 50, 231, -34, -1312, -737, };
const TfArray<1, int> tensor_dimension12 = { 1, { 64 } };
const TfArray<64, float> quant12_scale = { 64, { 0.00023372459691017866, 0.00040195422479882836, 0.00033529565553180873, 0.00020680451416410506, 0.00035392341669648886, 0.00021277267660479993, 0.0002058756654150784, 0.00033129224902950227, 0.0002537231775932014, 0.0002418564836261794, 0.00030542429885827005, 0.00018068168719764799, 0.0002981480211019516, 0.00039372497121803463, 0.0001638949615880847, 0.00045417374349199235, 0.00016820384189486504, 0.00030034338124096394, 0.00032736771390773356, 0.00040105177322402596, 0.00038790726102888584, 0.00021954171825200319, 0.0003811464412137866, 0.00025008263764902949, 0.00031152911833487451, 0.00052269961452111602, 0.00028854914125986397, 0.00028468569507822394, 0.00045374548062682152, 0.00036354598705656826, 0.00031178054632619023, 0.00024593793204985559, 0.00019719009287655354, 0.00016252562636509538, 0.00028725797892548144, 0.00023722507467027754, 0.00038373275310732424, 0.00044561069807969034, 0.00024493379169143736, 0.00017869693692773581, 0.0002355233154958114, 0.00033855863148346543, 0.00026719184825196862, 0.00044882067595608532, 0.00035205396125093102, 0.00032546298461966217, 0.00030323537066578865, 0.00043186629773117602, 0.00041555124334990978, 0.00028386877966113389, 0.00043496841681189835, 0.00036375800846144557, 0.00031453656265512109, 0.00030324005638249218, 0.00029477922362275422, 0.00025139006902463734, 0.00025620838277973235, 0.00028729546465910971, 0.00020784589287359267, 0.00041946241981349885, 0.00035844059311784804, 0.00036319097853265703, 0.00022407966025639325, 0.0002016162034124136, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[64*1*3*16] = { 
  /* [0][0][][] */ -7,-26,64,-7,53,-36,24,79,13,-1,1,-26,-18,23,1,36, -17,-33,-52,-3,12,-72,19,-20,-76,-12,-41,-9,-25,-24,-25,-73, -5,22,-36,-36,-6,-26,-127,-62,-84,-14,-49,37,35,-90,-40,-65, 
  /* [1][0][][] */ -59,-2,-127,26,-78,-34,0,16,14,-61,27,6,-86,17,9,-2, -23,-2,-42,-19,-55,-32,-5,-1,16,-34,-9,0,-112,-7,40,-3, 29,-21,31,-46,-17,-83,-23,-34,-23,-34,5,-8,5,2,2,35, 
  /* [2][0][][] */ -103,-18,47,21,-14,-2,30,-38,-28,-26,22,11,12,-27,-29,-7, -127,-33,13,4,-10,19,9,53,-20,-28,-21,35,15,-58,-73,-60, -13,-10,7,11,-16,9,15,-8,-18,37,31,29,2,-38,-4,-6, 
  /* [3][0][][] */ 57,55,-22,17,-122,2,-120,31,-10,-29,-60,15,60,-95,-24,-82, 22,-3,15,-48,-9,-42,-127,-110,-43,-72,-18,-9,10,-80,-67,-29, 29,-51,-4,-71,36,-92,-33,-44,-41,-2,25,-53,27,72,-8,74, 
  /* [4][0][][] */ -25,-8,-41,0,-33,5,2,23,34,-26,8,2,-23,63,0,32, -70,-6,-38,45,-86,-13,6,13,16,-127,17,-5,-104,-19,2,0, -59,-4,-28,-9,-70,-9,-8,23,21,-65,19,-15,-82,-21,11,20, 
  /* [5][0][][] */ -27,-54,19,-10,-10,-13,14,44,11,80,-52,-57,28,-11,71,-8, -26,-46,-24,-8,-55,37,6,5,-11,-29,-95,-38,9,3,11,-29, -9,64,-49,-24,-34,-17,-84,50,44,-62,-127,-24,-7,-25,-15,-34, 
  /* [6][0][][] */ 4,9,27,-9,-54,-39,-21,-52,-53,47,-76,-78,51,-19,20,-64, 6,-9,0,-20,-22,22,-49,127,-20,-10,2,83,14,9,85,-12, -61,-61,52,6,6,-21,59,-61,-29,29,20,-26,-2,-4,4,-41, 
  /* [7][0][][] */ -19,-34,-30,-53,-77,-35,-127,3,-46,-2,-50,-29,9,-22,-42,-91, -10,-46,18,-3,-13,-1,14,4,78,-49,8,0,-13,10,-41,20, -10,-18,-16,8,-33,17,-21,21,-8,-23,16,23,6,33,20,15, 
  /* [8][0][][] */ -9,-30,-14,13,-109,-55,-3,-55,-4,-58,1,-46,4,3,4,-106, -13,0,-57,-16,-127,-65,-4,-49,-68,-83,9,-19,12,2,-36,-127, 30,1,-28,49,-105,-51,-17,-28,-41,-29,-23,5,6,-50,-7,-35, 
  /* [9][0][][] */ 16,-16,23,-94,-17,-8,-98,-1,7,41,-69,23,1,-48,-8,-19, 7,71,-5,-124,-8,-42,-127,-5,-10,-8,-35,-13,6,-17,22,-30, 6,-11,11,-21,-57,-83,21,37,-49,22,32,-84,1,97,43,21, 
  /* [10][0][][] */ 4,5,-23,33,-113,-44,23,-48,-7,-126,10,6,25,-13,-13,-36, 36,-7,-87,7,33,-79,-5,-33,6,-115,17,-24,-33,-20,3,62, 26,-28,-38,-70,30,-127,-5,-21,-21,-53,-5,-41,-45,40,-51,-9, 
  /* [11][0][][] */ -17,-40,50,53,-23,-98,-13,49,-33,-7,-18,-68,-2,22,-13,-21, -28,-14,-87,41,19,-65,-29,25,-65,-38,38,-22,-9,5,-38,55, 12,-104,-38,-51,17,-26,27,30,-77,57,-32,-46,-48,36,127,5, 
  /* [12][0][][] */ -4,19,-58,-58,-8,38,-127,17,16,22,-81,-24,-17,-66,-9,22, 26,33,-21,-23,-6,-2,-107,13,-24,-72,-82,-46,-42,-50,-17,1, -24,-22,50,19,-15,-11,-14,-12,-27,-63,23,-40,-11,-9,-15,7, 
  /* [13][0][][] */ -36,21,9,-6,40,19,5,19,-5,30,4,53,19,-9,-37,-27, -3,-14,33,6,-24,9,-16,-7,-7,-15,-3,9,5,-21,-6,-30, 3,-127,-4,2,1,-30,25,46,-48,25,-1,-49,-2,15,26,15, 
  /* [14][0][][] */ -88,6,3,-43,-46,-66,81,15,46,-29,-27,-5,-71,-33,66,24, -28,-15,-15,122,-73,-42,4,25,-127,-10,-32,82,-71,-25,-23,-25, 50,-19,-105,-57,51,-25,-38,33,-80,18,-12,-16,-66,16,62,41, 
  /* [15][0][][] */ 38,4,-71,29,-4,-109,23,-43,-87,-46,12,1,-43,-21,-14,-15, 2,-26,-82,-19,24,-127,-6,-84,-119,-21,-12,-23,-81,8,6,-4, -11,-52,-2,-49,11,-72,6,-55,-30,24,28,-10,-51,11,-2,-3, 
  /* [16][0][][] */ -127,-98,14,2,114,-54,25,-46,-5,42,71,33,-28,-30,-81,0, -96,-101,29,2,-4,-13,1,16,-19,26,-38,-27,93,-40,-69,-79, -49,17,21,-59,-60,74,-51,102,16,15,-33,28,5,5,7,31, 
  /* [17][0][][] */ 45,-34,-67,18,19,-32,5,-63,-36,-57,27,-28,-44,15,-19,-3, -21,-74,3,-127,-26,7,-1,-52,-51,-13,-8,-52,-35,37,-57,-6, -55,-50,39,-91,67,-6,-7,-18,-61,36,-54,4,65,-15,-82,-73, 
  /* [18][0][][] */ 12,26,2,-58,13,-20,10,22,25,-127,-21,-55,-119,-61,-36,54, -5,-13,27,16,31,4,5,-28,30,-27,-31,-58,-9,-37,-66,22, -15,-61,38,40,-37,8,31,-92,-86,5,14,8,-5,-61,-90,-82, 
  /* [19][0][][] */ -30,-3,3,-49,9,6,-19,4,-15,5,-99,30,-3,30,-32,-106, 4,-13,-4,-122,-50,51,-69,33,-23,-18,-127,2,-5,-23,-41,-2, 18,-9,-24,-113,-47,-22,-51,21,-12,-14,-43,-17,16,45,20,49, 
  /* [20][0][][] */ -17,-18,-10,3,37,7,21,-28,-13,11,-44,-34,29,1,-51,-66, -16,-22,-37,13,0,-6,-40,-6,-14,-3,-67,-69,-20,33,-34,-50, -53,10,-45,-23,50,39,-85,-1,18,-17,-127,-61,-31,31,-102,-12, 
  /* [21][0][][] */ -100,-30,10,12,-24,27,28,18,-52,-12,24,27,13,19,-17,-13, -102,-57,-11,6,-84,-34,15,16,-81,-100,8,-1,-5,-44,-3,-37, 127,-56,-15,-2,9,-48,36,19,-106,-85,32,-46,-16,30,-11,-8, 
  /* [22][0][][] */ 6,-27,-3,-4,-18,2,-47,11,-9,11,-106,-13,24,-36,7,-24, -15,30,-16,-3,-7,-10,-127,4,-32,11,-26,-6,-29,-12,-13,6, -1,0,11,18,-29,-1,-55,-12,57,-11,-19,-6,-10,-24,-14,33, 
  /* [23][0][][] */ 19,-10,26,-8,-42,-30,0,-51,25,13,-10,-101,-39,-1,33,-4, -22,-127,13,-37,-4,-17,41,-17,-41,11,-35,-93,-25,37,-25,3, -10,-69,0,-37,3,-22,-8,7,-114,0,-100,-36,57,-15,14,-76, 
  /* [24][0][][] */ -85,-1,-65,32,-8,11,-61,-14,54,-50,-23,-45,-60,52,-127,-65, -27,-5,17,-22,43,18,-9,21,-23,-22,-10,-33,-78,43,-98,-12, -91,-61,29,52,-37,2,13,3,-51,10,19,11,-28,-20,-26,-18, 
  /* [25][0][][] */ -10,-2,-10,19,-2,-7,14,-1,-3,-10,-36,-5,73,-27,-24,-18, 8,-1,-36,-22,0,-10,-127,-7,-3,-15,-46,-12,-5,-10,-26,3, 7,17,-12,-41,-1,-7,-127,-4,7,-21,-47,-20,-10,-4,-7,8, 
  /* [26][0][][] */ -13,-47,-24,-13,-5,-64,14,2,-125,-66,3,27,-127,-26,-62,5, -12,-24,-22,7,99,-30,3,-3,-58,-45,30,-3,-70,-8,-41,-19, 8,7,24,34,-7,-4,14,19,-3,-7,39,-39,44,26,7,0, 
  /* [27][0][][] */ -46,-109,-83,-29,-33,-127,34,-53,-3,-109,43,13,-48,40,-16,24, -27,-122,-110,34,-51,-53,-6,-51,-39,-82,17,29,-111,0,-16,13, 20,-51,-58,16,12,-98,31,-30,0,-6,27,-3,-104,26,40,30, 
  /* [28][0][][] */ -24,-77,-3,3,50,-52,1,-27,-10,9,-15,-122,-19,10,-16,18, -103,-120,14,10,-26,-1,6,-8,12,3,-27,-70,-21,6,-33,-20, -127,-26,7,27,-28,18,13,-15,-3,-2,-26,-16,24,-1,-68,-117, 
  /* [29][0][][] */ 9,18,-17,-20,5,3,-127,-29,3,3,-79,-2,-4,-51,-15,-24, 16,-15,2,-44,17,7,-105,-19,8,0,-83,18,-25,-39,7,-27, 10,38,-8,-19,8,-3,-80,-21,-2,43,-50,-6,9,-10,11,-72, 
  /* [30][0][][] */ -2,14,18,-7,-40,-18,-29,40,-1,-6,-54,-16,-13,-127,-13,-12, 14,-16,19,14,-52,-40,-3,-92,3,-38,-22,4,-9,-114,-29,-78, -17,-32,-22,28,-30,-6,24,-31,-21,-3,-7,21,5,-64,-32,-71, 
  /* [31][0][][] */ -2,5,7,-1,-55,-44,15,37,-54,-14,12,60,5,-77,9,-45, 5,-1,-20,21,-108,-14,-1,25,-30,-20,-19,-43,-19,-127,8,-99, 33,3,51,11,-62,3,-15,8,-24,15,-11,61,-10,-76,57,-46, 
  /* [32][0][][] */ -87,-53,10,4,61,-31,89,13,-79,21,20,-62,10,8,-47,-56, -15,127,-73,-21,-33,25,-50,-6,14,13,-19,15,-13,-103,-14,-39, -21,-21,38,-26,-12,-44,2,-66,-32,-46,88,38,-92,-56,6,7, 
  /* [33][0][][] */ 41,12,60,-66,-41,-9,-55,-12,14,-2,-32,-77,18,53,-42,-8, 33,-122,-49,19,-17,-49,-9,-5,-32,76,-15,-107,-38,102,-14,127, -31,-34,-42,108,0,-39,16,-65,8,-69,106,-19,-116,-10,37,-41, 
  /* [34][0][][] */ 15,-27,-47,3,-12,-46,-17,-11,-17,-45,-22,-57,-2,-11,29,44, 9,-58,-27,18,15,-35,13,87,-29,-33,-12,-127,3,-36,-20,-21, 15,-19,-38,22,67,5,4,23,-2,-58,-36,-35,10,-17,-23,-19, 
  /* [35][0][][] */ 8,-15,-16,66,17,12,-23,-5,-84,-27,-28,62,28,-33,64,-54, 36,-19,-8,-12,24,-12,-64,-18,-127,41,-73,-69,39,8,-10,-27, 6,-28,-21,-52,17,2,-35,3,-97,81,52,-61,21,11,13,3, 
  /* [36][0][][] */ -68,5,21,19,-24,4,20,2,49,-18,-1,-25,-64,6,-14,15, -70,-19,18,19,-8,10,12,-9,-29,-25,4,0,-37,-51,-41,-4, -118,-60,-1,31,-7,-3,30,-64,-49,-26,3,21,-17,-119,-127,-69, 
  /* [37][0][][] */ -26,-61,-27,-109,26,-29,7,-31,-12,13,-19,-16,18,16,-34,-7, -49,-25,15,-18,2,27,-26,-10,-5,15,-127,1,-16,12,-41,-39, -11,0,2,-3,-100,10,-19,24,15,10,-64,11,26,-24,-15,39, 
  /* [38][0][][] */ -33,13,57,-30,-55,11,-65,19,-30,-22,-51,8,1,-19,-18,-127, -9,-103,-9,-12,-29,-19,101,5,-58,5,30,-27,-2,49,14,21, -39,-122,-10,-3,20,-23,-13,-15,-25,49,-10,-28,-21,9,-32,21, 
  /* [39][0][][] */ -19,-24,49,-25,-88,48,-52,51,127,-10,-41,-29,45,-102,-81,-23, -33,-25,-71,29,-24,59,-34,-42,41,8,-18,30,-18,-105,21,-10, -7,-17,-47,33,17,-26,-3,88,-45,39,-14,30,-22,-71,-2,23, 
  /* [40][0][][] */ -15,-5,-62,15,-17,9,-4,123,-77,-32,-10,64,-11,-17,8,-24, -84,41,7,-32,-3,64,-8,-31,4,-7,14,29,-8,-17,25,19, -127,-23,40,17,20,-8,14,70,19,18,53,1,4,-46,-58,-8, 
  /* [41][0][][] */ -73,29,-127,18,6,9,-25,33,37,-8,-36,39,40,13,-41,3, -92,-4,-30,-22,-25,22,-53,39,-9,-112,-47,-44,-69,9,-83,10, -127,-5,12,-6,-33,34,-48,-11,20,-55,-40,-69,-121,-34,-35,50, 
  /* [42][0][][] */ -18,-24,19,-19,10,-10,-54,-3,-44,23,-127,-77,-29,5,-61,-70, -16,1,-12,-2,4,-42,-56,-1,105,-10,-17,-60,70,13,-98,-47, -30,4,-63,53,-104,-12,-11,-8,-27,-34,44,-19,-24,40,-17,24, 
  /* [43][0][][] */ 1,8,32,-6,-23,-13,-17,-9,-1,7,-23,-2,9,-19,-17,-16, 26,-17,-9,2,-3,-36,-2,37,-10,-23,-14,-127,10,15,-8,15, 4,-35,8,2,-3,-21,10,39,-31,-33,-5,-61,19,1,38,8, 
  /* [44][0][][] */ 6,0,-15,-95,56,-4,-22,2,-28,-47,-13,-15,-62,-10,-10,40, -13,6,26,6,-10,14,-2,1,14,-1,-33,-24,-24,-37,-69,11, -48,-22,48,44,-44,-8,6,-45,-53,2,-45,8,18,-82,-80,-127, 
  /* [45][0][][] */ 5,-44,-1,18,31,-4,-15,-8,-4,78,-17,-50,-6,6,-18,9, 27,-54,-17,2,15,-68,-31,48,-11,-10,-34,-127,-57,-3,6,28, -6,-61,-34,1,5,-17,7,22,-50,28,16,1,-26,25,1,29, 
  /* [46][0][][] */ -22,-1,84,-9,-9,17,-21,58,4,7,-26,19,15,-14,16,-65, -3,-12,-16,-10,-5,-26,-18,-85,-26,2,-14,-34,-15,-26,-2,-30, 19,-93,-33,20,-11,-51,31,-23,-127,-35,12,-4,-4,-25,24,-10, 
  /* [47][0][][] */ -6,-127,13,-6,4,1,14,9,-3,18,30,-33,-1,28,12,-21, -29,-119,7,-6,21,25,28,6,-16,-1,-16,0,23,4,1,-17, -51,-18,12,-5,-7,3,0,-17,-8,-1,7,8,6,-5,-22,-34, 
  /* [48][0][][] */ -52,-1,1,-23,-15,1,-24,-29,-30,-12,-98,0,-10,13,-19,-114, -15,7,4,6,-26,-1,-77,9,-10,-20,-103,2,52,38,-13,-20, -32,13,-24,-11,-6,12,-127,17,-8,-4,-103,5,-11,-31,-88,15, 
  /* [49][0][][] */ 13,1,-64,127,-125,15,-54,-60,34,-21,-21,-20,-6,11,30,-20, 29,-16,-9,-37,-16,-18,-39,-16,7,-54,-16,-44,-12,22,1,-56, 6,-33,-31,-88,30,8,-50,-48,-46,-24,-1,-57,-1,7,-50,-89, 
  /* [50][0][][] */ -28,2,-55,40,-18,-127,15,-67,-1,-59,3,11,-17,7,32,4, -14,4,-43,-14,-16,-67,12,-91,-14,-10,9,-12,15,-20,26,-19, 30,-19,-52,-14,22,-106,-7,-82,-17,1,17,-41,-31,14,-6,40, 
  /* [51][0][][] */ -21,-25,-53,-49,0,-17,6,-11,-12,-18,-4,15,-67,-35,28,52, -78,-14,-48,-54,-61,14,38,-8,-5,-55,10,25,-83,13,-3,-10, 4,16,-79,-44,-127,0,-18,-20,21,-106,8,23,-76,6,45,-9, 
  /* [52][0][][] */ 35,-64,-21,18,-37,-127,8,-69,-72,-56,10,-4,-10,29,9,67, -24,-53,-87,14,-54,-89,-1,-118,-24,-95,32,30,-90,25,5,-31, -39,9,-54,45,-43,-59,14,-102,-20,-78,21,14,-53,16,13,-15, 
  /* [53][0][][] */ -17,42,-11,-28,-99,-43,-39,-69,5,-14,-41,-20,-11,-38,21,-71, 9,-14,-20,-4,-91,-85,-93,-55,6,-43,-27,-86,17,7,-63,-108, -18,27,23,32,-79,-119,25,-7,-18,-53,18,-127,30,10,-34,-61, 
  /* [54][0][][] */ -1,-9,-56,18,34,9,-1,-127,-20,-20,30,39,-87,-30,-104,50, 20,-12,7,-57,29,7,-44,-99,8,-57,4,4,-66,-5,-101,-4, 3,60,-72,-73,12,-1,-40,0,10,-8,14,-40,-59,-6,-60,13, 
  /* [55][0][][] */ -24,81,8,-127,-26,-2,-5,-31,8,31,-5,18,-63,59,30,-70, -13,-21,-17,-98,-68,-101,1,-68,-1,-56,-22,-39,-32,-39,-37,-108, -20,-16,28,-56,-38,-124,-109,-28,-29,-11,-99,-73,32,17,-100,-77, 
  /* [56][0][][] */ 3,-21,-34,-9,20,-80,-61,-35,-51,29,-35,-30,-19,26,-13,24, -14,-127,-54,33,-2,-83,16,-49,-8,91,-36,-48,-68,29,16,25, -13,-27,17,3,-1,-4,-2,-14,-44,-2,25,20,-23,28,30,47, 
  /* [57][0][][] */ -31,-41,-10,-38,26,-34,2,-13,-32,-21,-11,-127,-13,-26,-50,-12, -10,-2,14,32,48,-53,25,-11,-49,-7,-94,-108,17,-28,-22,-89, -55,-15,-100,58,-11,-12,-14,33,66,-27,-119,-67,-16,35,0,1, 
  /* [58][0][][] */ 39,23,-11,-34,34,-5,-5,127,-100,21,-21,-46,16,3,-29,-43, -2,9,-50,14,-5,3,-48,-29,-15,75,-58,41,4,-12,43,-48, 104,1,-3,-59,6,-17,-69,2,-15,-32,-3,38,-29,7,8,-37, 
  /* [59][0][][] */ 22,-28,-30,7,29,-127,9,4,-76,-58,12,-53,-65,-7,-4,-13, 5,-122,-33,-48,22,-35,7,-7,-27,-3,9,-10,-32,20,-10,33, -22,-113,34,-10,-33,6,16,-35,-44,18,-17,23,-1,5,-24,-3, 
  /* [60][0][][] */ 24,-34,-38,-45,15,-45,6,-32,-29,-32,14,-30,-103,13,-11,35, -13,-35,-6,-50,42,-22,-1,-25,15,-18,-14,-54,-2,13,-16,-18, -26,-11,22,4,-3,40,-3,14,-3,16,-96,-20,35,-5,-31,-127, 
  /* [61][0][][] */ 21,19,-9,21,-43,-5,-92,5,-72,-46,-90,11,18,-99,25,-16, -26,18,15,18,6,2,-120,1,-19,16,-127,23,-9,-54,8,-50, 45,1,-3,-5,7,14,-124,-10,-14,3,-18,4,0,-23,-23,-66, 
  /* [62][0][][] */ 1,-14,2,17,72,-46,9,39,-2,36,-46,-85,-55,5,-10,-3, 32,1,-56,-31,-11,14,-50,20,-31,-84,-43,127,-11,-66,-10,1, -3,-11,13,-1,1,-44,-6,-68,-59,54,7,-28,19,-48,34,20, 
  /* [63][0][][] */ -48,-91,52,-15,7,-33,33,-11,6,52,-23,-35,-12,11,35,-35, -109,-89,36,-10,-2,-1,35,127,57,-41,-22,54,-13,23,-2,23, -69,-20,-15,-57,-26,14,-45,-19,3,-10,-56,-54,-3,-6,-17,49, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 64,1,3,16 } };
const TfArray<64, float> quant13_scale = { 64, { 0.0043320115655660629, 0.0074500944465398788, 0.0062145991250872612, 0.0038330564275383949, 0.0065598585642874241, 0.0039436742663383484, 0.0038158404640853405, 0.0061403973959386349, 0.004702678881585598, 0.0044827335514128208, 0.0056609427556395531, 0.0033488778863102198, 0.0055260793305933475, 0.0072975680232048035, 0.003037741407752037, 0.0084179667755961418, 0.0031176051124930382, 0.0055667697452008724, 0.0060676569119095802, 0.0074333678930997849, 0.0071897385641932487, 0.004069136455655098, 0.0070644291117787361, 0.0046352026984095573, 0.0057740937918424606, 0.0096880719065666199, 0.0053481669165194035, 0.0052765593864023685, 0.0084100291132926941, 0.0067382100969552994, 0.0057787541300058365, 0.0045583820901811123, 0.003654856001958251, 0.0030123612377792597, 0.0053242361173033714, 0.0043968916870653629, 0.0071123652160167694, 0.0082592535763978958, 0.0045397705398499966, 0.0033120913431048393, 0.0043653501197695732, 0.0062750773504376411, 0.0049523166380822659, 0.0083187492564320564, 0.0065252091735601425, 0.0060323537327349186, 0.0056203720159828663, 0.0080045051872730255, 0.0077021108008921146, 0.0052614179439842701, 0.0080620022490620613, 0.0067421398125588894, 0.0058298357762396336, 0.0056204586289823055, 0.0054636397399008274, 0.0046594352461397648, 0.0047487411648035049, 0.0053249304182827473, 0.0038523578550666571, 0.0077746035531163216, 0.0066435830667614937, 0.0067316298373043537, 0.0041532455943524837, 0.0037368927150964737, } };
const TfArray<64, int> quant13_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -1213, -582, -1897, -4298, -3053, -2057, -3064, -5285, -3905, -3546, -3418, -2340, -1747, -5074, -2323, -5895, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00021973879483994097, 0.00017946018488146365, 0.00028466686489991844, 0.00013328313070815057, 0.00027018206310458481, 0.00022905155492480844, 0.00015942257596179843, 0.00017167424084618688, 0.00020523542480077595, 0.00020017595670651644, 0.00017128812032751739, 0.00022459353203885257, 0.00024390718317590654, 0.0001392912381561473, 0.00024148565717041492, 0.00015897664707154036, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*3*13] = { 
  /* [0][0][][] */ -127,-11,-44,5,3,-11,-14,-2,4,50,30,18,-10, -45,-37,-55,-36,-15,47,51,40,-10,-24,24,-3,-11, 29,66,-92,-3,-53,-32,64,74,48,-23,-66,8,-1, 
  /* [1][0][][] */ -127,-89,-49,-23,57,58,13,-31,34,67,-18,17,29, -90,-81,-10,-16,-7,61,31,7,-34,25,68,5,14, -48,-105,39,-57,43,38,-5,21,53,14,4,62,34, 
  /* [2][0][][] */ 25,-71,38,-10,-39,81,-5,-33,25,1,2,-19,-21, -51,1,3,1,51,24,-4,-30,-4,-2,-7,-13,5, 24,127,-27,49,39,-54,-49,21,-42,0,-46,11,-9, 
  /* [3][0][][] */ -81,45,39,59,-55,-106,-100,-50,-25,8,105,56,50, 11,45,56,69,19,-106,-88,-47,-61,18,127,52,70, 9,-4,-30,-6,56,-30,-45,-13,4,12,94,19,-11, 
  /* [4][0][][] */ 127,-37,-36,22,-35,-24,53,35,-23,-19,-12,3,-17, 48,-5,-17,-19,40,-26,7,27,24,-63,-2,2,-5, -90,41,-17,-28,36,26,-36,6,47,-65,-55,10,13, 
  /* [5][0][][] */ -19,50,54,-28,72,3,-41,-21,-52,-25,-30,-21,12, 24,-33,18,20,18,41,-8,-12,-8,0,-32,7,-44, 41,-127,56,12,0,39,-17,-25,6,-9,1,-17,13, 
  /* [6][0][][] */ 127,42,10,46,-113,-63,17,-2,16,21,25,15,-16, 127,69,14,52,-22,-91,17,-70,32,-50,63,-10,37, -38,74,-6,50,-17,53,-49,-27,-58,13,-6,43,-2, 
  /* [7][0][][] */ 66,127,24,-86,-61,56,112,-70,-110,70,58,-65,-32, 32,62,42,-101,31,48,29,-7,-39,-12,41,9,-64, 30,4,7,-71,-6,113,-98,-8,-15,-2,-16,2,2, 
  /* [8][0][][] */ 50,-8,44,-70,78,-37,23,-34,40,-19,1,-8,13, -70,-119,83,-127,33,-48,-12,-16,30,-21,24,-22,39, 40,-21,3,-81,-9,38,-17,21,-12,12,44,-37,35, 
  /* [9][0][][] */ -2,51,-7,29,55,20,-24,-17,-27,14,-82,25,-37, 50,57,-82,-17,117,13,-127,44,50,-10,-48,-21,46, 13,42,-76,-19,-12,88,14,-75,33,-1,29,-16,5, 
  /* [10][0][][] */ 0,55,-19,41,13,-93,-23,37,-36,31,19,16,-12, 61,-94,19,127,-88,-50,14,-6,-5,31,39,29,-13, 66,-37,13,75,-72,-54,-8,2,24,15,30,-12,-36, 
  /* [11][0][][] */ -98,-16,-91,114,58,-80,-32,5,28,-20,12,-18,23, -20,-50,-7,40,-70,10,1,-36,-6,46,-12,11,-3, -25,-127,68,51,-32,58,9,-11,-56,38,-32,16,-18, 
  /* [12][0][][] */ -127,74,-23,18,18,60,-39,16,-5,-17,-47,7,-9, -35,94,26,-5,-2,53,-4,-19,-28,-22,-8,-29,-25, 44,26,64,-38,10,4,36,-17,3,8,-9,-10,9, 
  /* [13][0][][] */ 18,92,-18,-22,28,-90,70,54,77,-38,-9,-13,-59, 77,24,17,-46,2,-127,7,36,115,23,-39,-29,-27, 114,10,28,30,38,-81,-30,2,78,50,-20,-22,-66, 
  /* [14][0][][] */ 52,127,5,-33,-72,28,19,-49,-11,57,-10,32,-22, 8,-2,-26,-33,-2,-3,-20,-66,72,74,-37,-3,22, -35,-32,-73,36,-35,31,12,32,11,-14,30,0,-5, 
  /* [15][0][][] */ 95,-6,63,-46,-40,-24,14,124,-18,8,-43,-33,2, 127,26,-49,11,-96,21,1,75,-20,9,-20,-52,1, 86,-103,-12,12,-65,59,-22,54,5,-29,16,20,-5, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,3,13 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0039836019277572632, 0.0032533986959606409, 0.0051606702618300915, 0.0024162640329450369, 0.0048980782739818096, 0.0041524311527609825, 0.0028901409823447466, 0.0031122488435357809, 0.0037206732667982578, 0.0036289510317146778, 0.003105249023064971, 0.0040716123767197132, 0.0044217458926141262, 0.0025251838378608227, 0.0043778466060757637, 0.0028820566367357969, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.055160831660032272, } };
const TfArray<1, int> quant16_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.053952902555465698, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.053952902555465698, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.053952902555465698, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.053952902555465698, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,25,64 } };
const TfArray<1, float> quant21_scale = { 1, { 0.026619290933012962, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,25,1,64 } };
const TfArray<1, float> quant22_scale = { 1, { 0.026619290933012962, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,13,1,64 } };
const TfArray<1, float> quant23_scale = { 1, { 0.026619290933012962, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,13,64 } };
const TfArray<1, float> quant24_scale = { 1, { 0.026619290933012962, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,13,64 } };
const TfArray<1, float> quant25_scale = { 1, { 0.031406041234731674, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,13,1,64 } };
const TfArray<1, float> quant26_scale = { 1, { 0.031406041234731674, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,7,1,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.031406041234731674, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,448 } };
const TfArray<1, float> quant28_scale = { 1, { 0.031406041234731674, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,2 } };
const TfArray<1, float> quant29_scale = { 1, { 0.066850967705249786, } };
const TfArray<1, int> quant29_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,2 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,15,14 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,2 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,3 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,13,12 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,4 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,5 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 24,11,10 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,6 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,7 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,9,8 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 896, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension21, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension23, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension24, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension25, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension26, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension27, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 448), (TfLiteIntArray*)&g0::tensor_dimension29, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[15] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[15] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 31, };
const size_t tflNodes_subgraph_index[] = {0, 15, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  30, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_43_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 31;
  for (size_t i = 0; i < 31; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_43_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_43_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_43_invoke() {
  for (size_t i = 0; i < 15; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_43_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
